#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 0
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
#if defined(__GNUC__) && __GNUC__ >= 3
__attribute__((__noreturn__))
#endif
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 107
#define YY_END_OF_BUFFER 108
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1055] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      108,  106,  105,  106,  102,  101,  106,  103,  104,   16,
      106,  106,  106,  106,  106,  106,  106,  106,  106,  106,
      106,  106,  106,  106,    4,    5,    2,    3,    8,    9,
        6,    7,   15,   14,   10,   12,   11,   13,    1,  107,
      107,   98,  107,   98,  107,  107,  107,  107,  107,  107,
       99,    0,  101,    0,    0,   16,   17,   16,    0,    0,
        0,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        0,   62,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   80,    0,    0,    0,   98,    0,   86,    0,
        0,    0,   86,    0,    0,    0,   98,    0,    0,    0,
        0,    0,    0,   88,    0,    0,    0,    0,   86,    0,
        0,    0,    0,    0,    0,    0,    0,  100,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       44,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,    0,    0,   86,
        0,    0,    0,   86,    0,    0,    0,   86,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,

        0,    0,    0,    0,   90,    0,    0,    0,    0,    0,
        0,   88,    0,    0,    0,   90,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,   86,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   24,    0,    0,    0,    0,
        0,    0,    0,   36,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   59,    0,    0,
        0,    0,    0,    0,    0,    0,   73,   74,    0,    0,
        0,    0,   81,   82,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,    0,   92,    0,

        0,   86,    0,   86,   86,    0,   86,    0,    0,   86,
       86,   86,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,    0,    0,    0,
       87,    0,    0,   93,    0,   88,    0,    0,   90,    0,
       92,   88,    0,   88,   98,    0,   90,    0,    0,    0,
        0,    0,    0,    0,    0,   88,    0,   86,    0,    0,
        0,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   21,    0,    0,
       27,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,   43,    0,    0,    0,   48,    0,    0,    0,    0,
        0,    0,    0,   58,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   83,    0,   85,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   88,    0,   86,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   87,    0,   87,   87,    0,   87,    0,
       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,   88,    0,    0,    0,   90,
        0,    0,    0,   95,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   20,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   60,    0,   63,    0,    0,    0,   67,
        0,    0,    0,    0,    0,    0,   84,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   87,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   88,   96,   88,    0,   90,    0,    0,    0,    0,
       88,    0,    0,    0,   90,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   28,
       29,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       45,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       56,    0,    0,   64,    0,   66,    0,    0,    0,    0,
       72,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,   86,    0,    0,    0,    0,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   92,    0,    0,    0,    0,   88,    0,    0,    0,
        0,    0,    0,   97,    0,    0,    0,    0,    0,   89,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   87,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       87,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
       88,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   92,    0,    0,    0,    0,   88,    0,   95,
        0,   88,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,   31,    0,    0,    0,    0,
        0,   40,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   57,   61,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   86,    0,   86,    0,   86,
        0,   86,    0,   91,    0,   88,    0,   91,    0,   88,
        0,   88,    0,    0,    0,   91,    0,    0,   89,    0,
       89,    0,    0,   88,    0,    0,   91,    0,    0,    0,
       87,    0,   87,    0,   87,    0,   91,    0,   88,    0,

       87,    0,   86,    0,   86,    0,   91,    0,   88,    0,
       91,    0,   88,    0,   91,    0,   88,    0,   91,    0,
       88,    0,    0,    0,    0,    0,    0,   19,   22,    0,
       25,    0,    0,    0,   35,   38,    0,    0,    0,   46,
        0,    0,   50,    0,    0,   53,    0,    0,   65,    0,
        0,    0,   71,   75,    0,    0,   78,    0,    0,    0,
       88,    0,   94,    0,   88,    0,    0,   91,    0,   88,
        0,   89,   97,   88,    0,   91,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   52,
        0,    0,    0,    0,    0,   76,   77,   79,    0,   88,

        0,   88,    0,    0,    0,   23,    0,    0,    0,    0,
        0,   42,   47,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   26,    0,    0,   39,   41,   49,   51,   55,
        0,    0,    0,    0,    0,   33,    0,   54,    0,    0,
        0,    0,    0,   70,    0,    0,    0,   34,   68,    0,
        0,   69,   18,    0
    } ;

static yyconst YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    1,    6,    7,    8,    9,    1,   10,
       11,   12,    1,   13,    1,    1,    1,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
       16,    1,    1,    1,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       26,   33,   34,   35,   36,   37,   38,   39,   40,   26,
       41,    1,   42,    1,   43,    1,   44,   45,   46,   47,

       48,   49,   50,   51,   52,   26,   53,   54,   55,   56,
       57,   58,   26,   59,   60,   61,   62,   63,   64,   65,
       66,   26,    1,   13,    1,   13,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst YY_CHAR yy_meta[67] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
        1,    1,    1,    4,    5,    1,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        1,    1,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst flex_uint16_t yy_base[1236] =
    {   0,
        0,   43,   86,  129,  170, 2119,   14,   16,   19,   25,
       62,   65,   28,   29,  105,  144, 2111, 2099, 2079,  232,
     2081, 4425, 4425,   16, 4425, 2059, 2057, 4425, 4425,   56,
      141,    8,  265,  137,  212,  224,  228,  143,  149,  148,
       59,  161,  261,   58, 4425, 4425, 4425, 4425, 4425, 4425,
     4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425, 4425,
     2054, 4425,   74,  111,  327,   26,  114,  260,  369,  410,
     4425,  151, 2030, 2010,    0, 1997,    0,  154,  133,  211,
      217,  239,  109,  244,  291,  292,  287,  343,  373,  293,
      257, 1968,  372,  290,  197,  339,  218,  330,  377,  390,

      252,  380, 1898,  375,  401, 1909, 4425,  174,   28,   31,
      443,  352,  116,  157,  395,  357,  285,  476,  301,  448,
      456,  518,  347, 1894,  422,  491,  463,  499, 1867,  433,
      507,  560,  546,  574,  579,  533,  608, 4425,  402,  589,
      535,  492,  440,  563,  483,  491,  572,  571,  581,  577,
      640,  579,  613,  578,  624,  604,  600,  638,  609,  684,
      629,  652,  658,  661,  664,  441,  681,  693,  534,  544,
      708,  286,  712,  733,  713, 1838,  737,  722,  740, 1831,
      715,  751,  748, 1826,  542,  208,  759, 1829, 1816,  762,
      763,  771,  780,  794,  802,  822,  799,  810,  836,  306,

      806,  844,  847,  856, 1813,  807,  864, 1807,  766,  848,
      868, 4425,  872,  875,  883, 1799,  880,  891,  894, 1796,
      895,  903,  911, 1788, 1709,  908, 4425,  919,  922, 1706,
      931,  945,  948,  956,  953,  961,  966,  976,  975,  985,
      994,  699,  614,  637,  940,  981,  733,  783,  983,  997,
      967, 1001,  985,  992, 1008, 1010,  785, 1009,  930, 1034,
     1028, 1030,  994, 1011, 1020,  867, 1036, 1681, 1024, 1039,
     1042, 1048, 1064, 1052, 1067, 1057, 1680, 1657, 1070, 1074,
     1077, 1080, 1624, 1084, 1097, 1114,  980, 1122, 1119, 1137,
     1139, 1147, 1129, 1155, 1144, 1617, 1159, 1163, 1613, 1166,

     1168, 4425, 1176, 1612, 4425, 1179, 1605, 1606, 1187, 4425,
     1592, 4425, 1189, 1184, 1197, 1194, 1205, 1207, 1215, 1202,
     1223, 1232, 1246, 1254, 1274, 1257, 1212, 1289, 1262, 1297,
     1220, 1305, 1261, 1309, 1317, 1294, 1558, 1320, 1322, 1330,
     1552, 1327, 1338, 1551, 1335, 4425, 1346, 1349, 1488, 1250,
     4425, 4425, 1357, 4425, 1487, 1360, 1484, 1365, 1364, 1373,
     1376, 1384, 1387, 1395, 1482, 4425, 1399, 4425, 1408, 1422,
     1423,  397, 1426, 1434, 1437, 1449, 1450, 1457, 1458, 1465,
     1466, 1474, 1477, 1495, 1390, 1458, 1161, 1461, 1480, 1426,
     1492, 1482, 1331, 1496, 1504, 1491, 1246, 1180, 1475, 1391,

     1508, 1450, 1509, 1516, 1521, 1449, 1519, 1512, 1522, 1533,
     1523, 1313, 1525, 1442, 1535, 1540, 1543, 1551, 1547, 1559,
     1563, 1566, 1568, 1567, 1555, 1573, 1579, 4425, 1580, 1441,
     1595, 1599, 1619, 1616, 1603,  362, 1626, 1444, 1630, 1441,
     1634, 1640, 1643, 1647, 4425, 1650, 4425, 1652, 1653, 1661,
     1664, 1656,  627, 1666, 1430, 1672, 1427, 1676, 1679, 1682,
     1685, 1688, 1698, 1701, 1704, 1689, 1714,  644, 1718, 1392,
     1722, 1705, 1726,  837, 1729, 1391, 1733, 1378, 1737, 1740,
     1744, 1369, 1747, 4425, 1750, 1352, 4425, 1753, 1332, 1757,
     4425, 1130, 1314, 1760, 1302, 1764, 1767, 1771, 1774, 1779,

     1793, 1794, 1797, 1805, 1802, 1295, 1810, 1812, 1821, 1291,
     1279, 1825, 1828,  465, 1829, 1837, 1840, 1841, 1848, 1849,
     1856, 1857, 1865, 1878, 1875, 1848, 1257, 1856, 1874, 1870,
     1840, 1878, 1883, 1871, 1892, 1891, 1901, 1841, 1254, 1908,
     1833, 1912, 1899, 1896, 1913, 1922, 1917, 1925, 1927, 1924,
     1934, 1949, 1929, 1235, 1938, 1225, 1951, 1937, 1963, 1960,
     1940, 1956, 1971, 1984, 1964, 1986, 1215, 2003, 1971, 2029,
     1995, 2033, 2019, 2046, 2004, 2037, 2050, 2058, 2062, 2065,
     2066, 2074, 2077, 2085, 2087, 2095, 2082, 2092, 2103, 2106,
     2114, 2116, 2124, 2127, 2132, 2131, 2140, 2143, 2151, 2148,

     2155, 2159, 2162, 2170, 2167, 2174, 2182, 2179, 2190, 2193,
     2201, 2204, 4425, 2206, 2209, 2211, 2219, 2223, 2231, 2240,
     2254, 2255, 2228, 2263, 2266, 2275, 2271, 2283, 2286, 2287,
     2295, 4425, 1168, 4425, 2298, 1150, 2303, 2302, 2311, 2314,
     1145, 2322, 2324, 2332, 1138, 2319, 2335, 2340, 2343, 2348,
     2351, 2358, 2359, 2078, 2258, 2324, 1999, 2351, 2358, 1115,
     1106, 2024, 2327, 2343, 2355, 2012, 2356, 2360, 2163, 2371,
     1099, 2362, 2377, 2368, 2382, 2396, 2369, 2403, 2378, 2390,
     1098, 2404, 2409, 1090, 2411, 1089, 2088, 2417, 2418, 2422,
     1082, 1159, 2414, 1975, 2425, 2426, 2457, 2439, 2465, 2468,

     2480, 2482, 2490, 1064, 2487, 2498, 2495, 2506, 4425, 2509,
     2517, 2521, 2529, 2533, 2536, 2537, 2545, 2548, 2556, 2558,
     2566, 1057, 2553, 2574, 2563, 2578, 4425, 2582, 2590, 2594,
     2602, 2606, 2609, 1375, 2616, 2613, 2624, 2627, 2635, 2638,
     2614, 2646, 2649, 2650, 2658, 2661, 2669, 2671, 2679, 1010,
     2666, 2687, 2690, 2676, 2698, 2706, 2695, 2710, 2713, 2721,
     4425, 2724, 2732, 2740, 2744, 2752, 2756, 2760, 2763, 2729,
     2771, 2768, 2779, 2782, 2790, 2793, 2802, 2816, 2817, 2820,
     2828, 2825, 2837, 2833, 2845,  963, 2848, 2856, 2853, 2864,
     4425, 2867, 2875, 2879, 2887, 2890, 2891, 2899, 2902, 2910,

     2912, 2920,  958, 2907, 2928, 2917, 2932, 4425, 2936,  947,
     2944, 4425, 2947, 2952, 2955, 2960, 2963, 2968, 2491, 2955,
     2428, 2538, 2598, 2444,  934,  915, 2959, 2964, 2724, 2965,
     2764, 2947, 2963, 2972, 2775, 2672, 2977, 2982, 2984, 2529,
     2990, 2882,  914,  904, 3003, 2499, 2975, 2276, 3006, 3015,
     2335, 2840, 3018, 2978, 3038,  905, 3046, 4425, 3055,  904,
     3065, 4425, 3068,  897, 3076, 4425, 3079,  896, 3087, 4425,
     3035,  881, 3090, 3092, 3100,  874, 3043, 3108, 3111, 3116,
     3119, 3053, 3097,  859, 3124, 3132,  850, 3123, 3140, 3148,
      849, 3152, 4425, 3160,  825, 3168,  815, 3172, 4425, 3176,

     4425, 3184,  796, 3188, 4425, 3196,  783, 3200, 4425, 3208,
      774, 3212, 4425, 3220,  773, 3224, 4425, 3232,  754, 3236,
     4425, 3239, 3244, 3247, 3252, 3257, 2989,  732,  718, 3192,
      713, 2892, 3108, 3239,  690,  676, 3215, 3248, 3252,  666,
     3253, 3255,  636, 3132, 3258,  575, 3259, 3123,  542, 3256,
     3261, 2609,  541,  533, 3267, 3279,  520, 3282, 3295, 3314,
     4425, 3322,  509, 3302, 4425, 3330, 3333,  500, 3303,  481,
      472,  459,  435, 4425, 3341,  434, 3344, 3349, 3216, 3305,
     3313, 3333, 3304, 3336, 3342, 3340, 3005, 3344, 3345,  417,
     3354, 3347, 3349, 3358, 3350,  414,  338,  333, 3389, 4425,

     3409, 4425, 3411, 3371, 3374,  320, 3370, 3381, 2671, 3400,
     3264,  299,  288, 3402, 3404, 3409, 3152, 3411, 3412, 3413,
     3430, 3422,  285, 3419, 3428,  241,  238,  206,  181,  163,
     3423, 3425, 3430, 3427, 3446,  107, 3439,   98, 3449, 3432,
     3458, 3457, 3463,   90, 3479, 3472, 3470,   89,   61, 3482,
     3483,    6,    3, 4425, 3531, 3536, 3541, 3546, 3551, 3556,
     3561, 3566, 3568, 3572, 3577, 3582, 3587, 3592, 3597, 3602,
     3607, 3612, 3615, 3618, 3622, 3627, 3632, 3637, 3642, 3647,
     3652, 3657, 3662, 3667, 3672, 3677, 3682, 3687, 3692, 3697,
     3702, 3707, 3712, 3717, 3722, 3727, 3732, 3737, 3742, 3747,

     3752, 3757, 3762, 3767, 3772, 3777, 3782, 3787, 3792, 3797,
     3802, 3807, 3812, 3817, 3822, 3827, 3832, 3837, 3842, 3847,
     3852, 3857, 3862, 3867, 3872, 3877, 3882, 3887, 3892, 3897,
     3902, 3907, 3912, 3917, 3922, 3927, 3932, 3937, 3942, 3947,
     3952, 3957, 3962, 3967, 3972, 3977, 3982, 3987, 3992, 3997,
     4002, 4007, 4012, 4017, 4022, 4027, 4032, 4037, 4042, 4047,
     4052, 4057, 4062, 4067, 4072, 4077, 4082, 4087, 4092, 4097,
     4102, 4107, 4112, 4117, 4122, 4127, 4132, 4137, 4142, 4147,
     4152, 4157, 4162, 4167, 4172, 4177, 4182, 4187, 4192, 4197,
     4202, 4207, 4212, 4217, 4222, 4227, 4232, 4237, 4242, 4247,

     4252, 4257, 4262, 4267, 4272, 4277, 4282, 4287, 4292, 4297,
     4302, 4307, 4312, 4317, 4322, 4327, 4329, 4334, 4339, 4344,
     4349, 4354, 4359, 4364, 4369, 4374, 4379, 4384, 4389, 4394,
     4399, 4404, 4409, 4414, 4419
    } ;

static yyconst flex_int16_t yy_def[1236] =
    {   0,
     1055, 1055, 1056, 1056,    2,    5, 1057, 1057, 1058, 1058,
     1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1061, 1062,
     1054, 1054, 1054, 1054, 1054, 1054, 1063, 1054, 1054, 1064,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1065, 1054, 1066, 1067, 1068, 1069, 1070, 1071, 1068, 1070,
     1054, 1054, 1054, 1063, 1072, 1073, 1074, 1064, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,

     1063, 1063, 1063, 1063, 1063, 1065, 1054, 1075, 1076, 1077,
     1078, 1067, 1076, 1079, 1080, 1081, 1076, 1082, 1083, 1084,
     1085, 1082, 1083, 1086, 1087, 1088, 1089, 1089, 1090, 1091,
     1089, 1092, 1081, 1081, 1081, 1081, 1081, 1054, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1093, 1094,
     1095, 1076, 1096, 1090, 1094, 1086, 1097, 1095, 1095, 1090,
     1097, 1095, 1079, 1086, 1098, 1080, 1080, 1090, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1102, 1100, 1105, 1103, 1076,

     1106, 1107, 1104, 1104, 1090, 1108, 1104, 1086, 1054, 1105,
     1105, 1054, 1105, 1101, 1101, 1090, 1105, 1101, 1109, 1090,
     1110, 1109, 1109, 1090, 1111, 1110, 1054, 1110, 1109, 1090,
     1112, 1113, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1114, 1115, 1116, 1115, 1117,
     1116, 1116, 1117, 1116, 1118, 1086, 1111, 1090, 1090, 1117,

     1117, 1054, 1117, 1090, 1054, 1116, 1090, 1098, 1098, 1054,
     1090, 1054, 1119, 1120, 1121, 1120, 1122, 1121, 1121, 1122,
     1121, 1123, 1124, 1125, 1123, 1124, 1126, 1127, 1125, 1125,
     1128, 1125, 1122, 1122, 1122, 1126, 1086, 1129, 1127, 1127,
     1090, 1129, 1127, 1090, 1128, 1054, 1128, 1125, 1090, 1054,
     1054, 1054, 1122, 1054, 1090, 1121, 1090, 1130, 1131, 1130,
     1131, 1131, 1130, 1130, 1111, 1054, 1131, 1054, 1132, 1133,
     1133, 1134, 1135, 1136, 1137, 1137, 1119, 1119, 1119, 1119,
     1119, 1119, 1119, 1119, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,

     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1054, 1063, 1063,
     1138, 1139, 1140, 1139, 1141, 1140, 1140, 1141, 1140, 1141,
     1141, 1141, 1140, 1111, 1054, 1141, 1054, 1142, 1143, 1144,
     1143, 1145, 1144, 1144, 1145, 1144, 1145, 1145, 1145, 1144,
     1142, 1146, 1147, 1142, 1146, 1148, 1149, 1147, 1147, 1150,
     1147, 1148, 1151, 1149, 1149, 1151, 1149, 1150, 1150, 1147,
     1145, 1151, 1151, 1054, 1151, 1090, 1054, 1149, 1090, 1150,
     1054, 1152, 1153, 1152, 1153, 1153, 1152, 1153, 1152, 1154,

     1155, 1155, 1156, 1157, 1156, 1158, 1159, 1157, 1157, 1090,
     1159, 1157, 1160, 1161, 1162, 1163, 1160, 1160, 1142, 1142,
     1142, 1142, 1142, 1142, 1160, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1164, 1165, 1166,
     1165, 1167, 1166, 1166, 1167, 1167, 1167, 1166, 1167, 1168,
     1169, 1170, 1169, 1171, 1170, 1170, 1171, 1171, 1171, 1170,
     1171, 1172, 1173, 1172, 1174, 1175, 1176, 1177, 1177, 1178,

     1175, 1179, 1176, 1176, 1179, 1178, 1177, 1179, 1179, 1176,
     1178, 1179, 1054, 1180, 1181, 1181, 1180, 1181, 1180, 1182,
     1183, 1183, 1184, 1185, 1184, 1186, 1185, 1185, 1186, 1186,
     1186, 1054, 1187, 1054, 1185, 1187, 1188, 1189, 1190, 1189,
     1191, 1192, 1190, 1190, 1187, 1192, 1168, 1188, 1168, 1168,
     1168, 1168, 1168, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063,
     1063, 1063, 1063, 1063, 1063, 1063, 1164, 1165, 1166, 1165,

     1167, 1166, 1166, 1187, 1167, 1166, 1167, 1167, 1054, 1167,
     1166, 1167, 1166, 1167, 1168, 1169, 1170, 1169, 1171, 1170,
     1170, 1187, 1171, 1170, 1171, 1171, 1054, 1171, 1170, 1171,
     1170, 1171, 1172, 1193, 1172, 1194, 1195, 1196, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1201, 1203, 1202, 1202, 1187,
     1203, 1202, 1204, 1205, 1204, 1204, 1205, 1205, 1203, 1203,
     1054, 1203, 1202, 1204, 1203, 1202, 1205, 1203, 1206, 1207,
     1206, 1207, 1207, 1206, 1207, 1206, 1208, 1209, 1209, 1210,
     1211, 1210, 1212, 1211, 1211, 1187, 1212, 1211, 1212, 1212,
     1054, 1212, 1211, 1212, 1211, 1213, 1214, 1215, 1214, 1216,

     1215, 1215, 1187, 1216, 1215, 1216, 1216, 1054, 1216, 1187,
     1215, 1054, 1168, 1213, 1168, 1168, 1168, 1168, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1218, 1187, 1219, 1054, 1218, 1187,
     1219, 1054, 1220, 1187, 1221, 1054, 1220, 1187, 1221, 1054,
     1194, 1222, 1223, 1224, 1224, 1187, 1225, 1224, 1226, 1226,
     1226, 1227, 1228, 1229, 1230, 1230, 1187, 1223, 1230, 1231,
     1187, 1203, 1054, 1231, 1187, 1232, 1187, 1233, 1054, 1203,

     1054, 1234, 1187, 1235, 1054, 1211, 1187, 1212, 1054, 1211,
     1187, 1212, 1054, 1215, 1187, 1216, 1054, 1215, 1187, 1216,
     1054, 1168, 1213, 1168, 1213, 1213, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1223, 1223,
     1054, 1223, 1187, 1225, 1054, 1225, 1224, 1187, 1227, 1229,
     1229, 1229, 1187, 1054, 1230, 1187, 1168, 1168, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1223, 1054,

     1225, 1054, 1168, 1213, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1213, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217, 1217,
     1217, 1217, 1217,    0, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,

     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054
    } ;

static yyconst flex_uint16_t yy_nxt[4492] =
    {   0,
       22,   22,   23,   24,   22,   22,   22,   22,   22,   25,
       22,   22,   22,   26,   22,   22,   46,   75,   46,   71,
       75,   50,   75,   47,   48,   47,   48,   50,  124,   72,
       54,   54,  173,  176,  125,   81,  174,   55,   55,  177,
       28,   22,   22,   22,   22,   29,   24,   22,   22,   22,
       22,   22,   25,   22,   22,   22,   26,   22,   22,   51,
       52,   81,   76,   77,   54,   51,   52,   54,   57,   57,
       75,   55,   75,   75,   55,   75,  109,   56,  110,   99,
       56,  105,  111,   28,   22,   22,   22,   22,   23,   24,
       22,   22,   22,   22,   22,   25,   22,   22,   22,   26,

       22,   22,   57,   75,   75,   57,   99,   54,  105,   58,
       58,   58,   75,  113,   55,  114,  117,   58,  119,  115,
      173,   75,  126,   75,  174,  143,   28,   22,   22,   22,
       22,   29,   24,   22,   22,   22,   22,   22,   25,   22,
       22,   22,   26,   22,   22,   57,   54,   75,   58,   58,
       58,   75,  143,   55,   71,   75,   58,   75,   79,  184,
       76,   77,   75,   75,   72,  185,  139,   87,   75,   28,
       22,   22,   23,   95,   80,   75,  109,   75,  170,   96,
       97,  100,  171,   98,   57,   79,   31,   32,   33,   34,
       35,   36,  139,   87,   37,   75,  101,   38,   39,   95,

       80,   40,   41,   42,   43,   96,   97,   44,  100,   98,
      311,   75,  189,   31,   32,   33,   34,   35,   36,  158,
       75,   37,  101,   38,   39,   75,   75,   40,   41,   42,
       43,   75,   75,   44,   64,   65,   66,   67,   75,   88,
       68,   89,   75,   67,  140,   69,  158,  141,  160,   92,
       70,   67,   75,   75,   90,   75,   93,   94,   75,   91,
      144,  128,  129,  128,  130,   88,   75,   89,  131,  165,
      140,   75,  142,  141,  160,   75,   92,   70,   67,   75,
       90,   82,   93,   94,  102,   91,  155,  144,   83,  173,
      173,  103,   84,  174,  174,   85,  165,   86,  142,   75,

      104,   75,   75,  124,   75,   75,   75,   75,   82,  198,
      173,  102,  155,   75,  174,   83,  147,  103,   84,  145,
      146,   85,  148,   86,  157,  154,  104,  116,  116,  117,
      118,  119,  116,  116,   75,  121,  116,  116,  116,  116,
      122,  116,  116,  147,   75,  145,  146,   75,  148,  124,
      157,  154,   75,   75,  113,  198,  114,   75,  159,  117,
      115,  191,  161,  149,  304,  192,  575,  116,  116,  116,
      116,  117,  122,  119,  116,  116,  150,  126,  116,  116,
      116,  116,  122,  116,  116,  159,   75,   75,  161,   75,
      149,   75,  151,  162,   75,  163,  187,  188,  187,  189,

      166,  173,  150,  156,   75,  174,  167,  152,  153,  116,
      116,  132,  117,  132,  119,   75,   75,  164,  126,  151,
      162,  168,  163,  211,  212,  211,  133,  166,   75,  156,
      213,   75,  167,  152,  153,  227,  242,  134,  225,  225,
      135,  228,  136,  164,  179,  180,  179,  181,  168,  137,
      200,  182,  201,  133,   75,   75,  202,  204,  205,  204,
      206,  972,  242,  134,  207,  220,  135,  221,  136,  173,
      283,  222,  247,  174,  972,  137,  190,  190,  117,  193,
      191,  190,  190,  972,  195,  190,  190,  190,  190,  196,
      190,  190,  215,  216,  215,  217,  283,   75,  247,  218,

      223,  129,  223,  221,  225,   75,   75,  222,  229,  230,
      229,  221,  246,  225,  249,  222,  190,  190,  190,  190,
      117,  196,  191,  190,  190,  250,  192,  190,  190,  190,
      190,  196,  190,  190,   75,  117,  109,  191,  287,  246,
      249,  192,  288,  309,  310,  309,  176,   75,  117,   75,
      191,  250,  290,  245,  192,   75,   75,  240,  190,  190,
      190,  231,  117,  231,  191,  190,  190,  190,  192,  190,
      190,  190,  190,  233,  190,  190,  117,   75,  191,  234,
      245,  117,  192,  191,  240,   75,   75,  192,  252,   75,
      235,   75,   75,   75,  269,   75,  248,  254,  237,  233,

      190,  190,  190,   75,  236,  234,  251,  238,  239,  253,
      117,  267,  191,  243,   75,  252,  192,  235,   75,  244,
      272,  269,  248,   75,  254,  237,  241,   75,   75,  355,
      236,  587,  251,  238,  239,  253,  386,  267,   75,  271,
      243,  268,  270,   75,  274,  244,  344,  272,  600,  277,
       75,   75,   75,  241,   75,  387,  255,  256,  257,  258,
      259,  260,  273,  386,  261,  271,   75,  268,  262,  270,
      274,  263,   75,  264,  265,   75,  277,  266,   75,  278,
       75,  280,  387,  255,  256,  257,  258,  259,  260,  273,
       75,  261,  281,  279,  262,   75,  282,  263,   75,  264,

      265,  284,  275,  266,   75,  278,  276,   75,  280,  292,
      180,  292,  293,   75,  296,  176,  294,  305,  281,  279,
      297,  290,  282,  303,  304,  285,  293,   75,  284,  275,
      294,  385,   75,  276,  298,  299,  298,  225,  301,  302,
      301,  292,  180,  292,  293,  303,   75,   75,  294,  390,
      184,  285,  306,  307,  306,  293,  185,  385,  225,  294,
      187,  188,  187,  189,  117,  124,  314,  350,  351,  350,
      315,  317,  319,  216,  319,  320,  390,  225,  225,  321,
      313,  313,  117,  322,  314,  313,  313,  225,  324,  313,
      313,  313,  313,  325,  313,  313,  200,   75,  327,   75,

      225,  124,  328,  330,  205,  330,  331,  317,  337,  346,
      332,  334,  212,  334,  338,  347,  391,  401,  335,  225,
      313,  313,  313,  313,  117,  325,  314,  313,  313,  225,
      315,  313,  313,  313,  313,  325,  313,  313,  200,  486,
      327,  605,  391,  401,  328,  340,  341,  340,  342,  344,
      352,  331,  343,  225,  225,  332,  335,  330,  205,  330,
      331,  972,  313,  313,  332,  348,  349,  348,  331,  334,
      212,  334,  332,  353,  354,  353,  335,  355,  225,  320,
      335,   75,  352,  321,  319,  216,  319,  320,  335,  209,
      413,  321,  356,  357,  356,  320,  220,  227,  359,  321,

      225,  225,  360,  362,  363,  230,  363,  359,  225,  225,
      227,  360,  364,  129,  364,  359,  362,  413,   75,  360,
      367,  368,  367,  363,  230,  363,  359,  362,   75,   75,
      360,  313,  369,  117,  369,  314,  313,  313,  313,  315,
      313,  313,  313,  313,   75,  313,  313,  372,   75,  373,
      117,  225,  314,  374,   75,  117,  315,  314,  117,  403,
      314,  315,  225,  117,  315,  314,  388,  225,  117,  315,
      314,  313,  313,  313,  315,  375,  376,  117,  117,  314,
      314,   75,  176,  315,  315,  403,  377,  117,  435,  314,
      379,  394,  388,  315,  378,   75,  117,   75,  314,   75,

      389,  375,  315,  376,  380,  396,   75,  381,   75,  382,
      392,   75,  377,  393,  225,   75,  397,  379,  394,  383,
      378,  384,   75,   75,   75,   75,  409,  389,  395,  398,
      380,  410,  396,  381,   75,  382,  392,  400,   75,  402,
      393,  399,   75,  397,   75,  383,  411,  384,   75,  406,
       75,  415,  409,   75,  395,  398,   75,  407,  410,  412,
      408,  225,   75,  400,  404,  402,   75,  399,  225,  405,
      418,   75,  411,  416,  417,  414,  406,  415,   75,  421,
      419,   75,  420,  407,   75,  412,  408,  422,   75,  423,
      404,   75,  425,  428,   75,  405,   75,  418,   75,  416,

      417,  414,  424,   75,   75,  421,  419,  426,  429,  420,
      427,   75,   75,   75,  422,  423,  109,  430,  432,  425,
       75,  176,  433,  437,  180,  437,  438,  435,  424,   75,
      439,  305,  220,  426,  615,  429,  427,  442,  441,  302,
      441,  304,  225,  438,  430,  442,  296,  439,  437,  180,
      437,  438,  297,  209,  225,  439,  443,  307,  443,  438,
      444,  445,  444,  439,  298,  299,  298,  225,  305,  441,
      302,  441,  225,   75,  442,   75,  442,  446,  447,  446,
      443,  307,  443,  438,  442,  528,  124,  439,  309,  310,
      309,  117,  452,  449,   75,  850,  124,  450,  454,  216,

      454,  455,  452,  540,  352,  456,  458,  212,  458,  355,
      459,  455,  528,  459,  337,  456,  454,  216,  454,  455,
      473,  850,  346,  456,  460,  357,  460,  455,  479,   75,
      540,  456,  448,  448,  117,  461,  449,  448,  448,   75,
      463,  448,  448,  448,  448,  464,  448,  448,  200,   75,
      466,  350,  351,  350,  467,  469,  205,  469,  470,  200,
       75,  466,  471,  352,  344,  467,  470,  539,   75,  459,
      471,   75,  448,  448,  448,  448,  117,  464,  449,  448,
      448,  634,  450,  448,  448,  448,  448,  464,  448,  448,
      475,  341,  475,  476,  539,  225,  337,  477,  469,  205,

      469,  470,  473,  209,  227,  471,  480,  349,  480,  470,
      458,  212,  458,  471,  448,  448,  227,  459,  481,  354,
      481,  483,  484,  483,  486,  459,  476,   75,  485,  487,
      477,  475,  341,  475,  476,  485,  225,  346,  477,  488,
      489,  488,  476,  479,  552,   75,  477,  490,  491,  490,
      480,  349,  480,  470,  479,  535,  225,  471,  481,  354,
      481,  460,  357,  460,  455,  459,  227,  220,  456,  493,
      552,  487,  496,  494,  497,  230,  497,  493,  227,  173,
      346,  494,  535,  174,  496,  498,  368,  498,  497,  230,
      497,  493,  496,  487,  346,  494,  499,  129,  499,  493,

      498,  368,  498,  494,   75,   75,  526,  496,  448,  500,
      117,  500,  449,  448,  448,  448,  450,  448,  448,  448,
      448,  542,  448,  448,  372,  372,  503,  503,  506,  352,
      504,  504,  352,  526,  507,  509,  510,  509,  511,  514,
       75,  515,  512,  305,  531,  516,  305,  542,  448,  448,
      448,  514,  117,  515,  449,   75,   75,  516,  450,  117,
      117,  449,  449,   75,   75,  450,  450,  117,  117,  449,
      449,  531,   75,  450,  450,   75,  117,  518,  449,  117,
      529,  449,  450,  517,  366,  450,  519,  527,  225,   75,
      522,  225,  225,  521,   75,  520,   75,  117,  523,  449,

      530,  524,  534,  450,  518,   75,   75,  529,  541,  517,
       75,  532,  519,  527,  536,  525,  533,  522,   75,  521,
      538,  520,   75,   75,  537,  523,   75,  530,  524,  534,
       75,  548,  543,   75,  541,   75,   75,   75,  532,   75,
      551,  536,  525,  533,  544,  553,  538,   75,  545,   75,
      546,  537,  549,  547,   75,  225,  225,   75,  548,  543,
      550,   75,  554,  556,  555,   75,  209,  551,  558,   75,
      544,  557,  553,   75,  545,  559,  546,   75,  549,  547,
       75,   75,   75,  560,  562,  561,  550,   75,  554,  564,
      556,  555,  565,   75,   75,  558,  225,  109,  557,  569,

      563,  176,  559,  570,  577,  302,  577,  572,  312,  225,
      560,  562,  561,  567,  566,  564,  225,  225,  176,  565,
      574,  180,  574,  575,  572,  209,  563,  574,  180,  574,
      575,  578,  307,  578,  575,  577,  302,  577,   75,  567,
      566,  579,  447,  579,  578,  307,  578,  575,  444,  445,
      444,  579,  447,  579,  117,  124,  581,  589,  212,  589,
      582,  584,  586,  216,  586,  587,  124,  586,  216,  586,
      587,   75,  584,  590,  357,  590,  587,  589,  212,  589,
      591,  354,  591,  590,  357,  590,  587,  117,  592,  581,
      200,  337,  596,  593,   75,   75,  597,  602,  594,  599,

      205,  599,  600,  117,  594,  581,  200,  337,  596,  582,
      225,  366,  597,  602,  594,  604,  341,  604,  605,  599,
      205,  599,  600,  607,  349,  607,  600,  609,  484,  609,
      604,  341,  604,  605,  610,  489,  610,  605,  611,  491,
      611,  607,  349,  607,  600,  591,  354,  591,  609,  484,
      609,  612,  613,  612,  610,  489,  610,  605,  611,  491,
      611,  617,  230,  617,  615,  618,  368,  618,  617,  230,
      617,  615,  618,  368,  618,  619,  129,  619,  615,  580,
      620,  117,  620,  581,  580,  580,  580,  582,  580,  580,
      580,  580,  225,  580,  580,  372,  372,  623,  623,  506,

      225,  624,  624,  225,  506,  626,  628,  510,  628,  629,
      626,  631,  632,  631,  633,  209,  629,  225,  312,  580,
      580,  580,  628,  510,  628,  629,  635,  636,  635,  629,
      514,  641,  638,  225,  209,  225,  639,  642,  644,  645,
      644,  646,  514,  514,  638,  638,  209,   75,  639,  639,
      117,  117,  581,  581,   75,   75,  582,  582,  117,  117,
      581,  581,   75,  668,  582,  582,  654,  117,  647,  581,
       75,  225,  655,  582,  658,  666,  649,  514,  648,  638,
      117,  650,  581,  639,   75,   75,  582,  651,   75,  668,
      656,  657,   75,  654,  652,  647,  653,   75,  659,  655,

      658,  666,  209,  649,  648,   75,   75,  663,  650,  661,
       75,  107,   75,   75,  651,   75,  660,  656,  657,  664,
      652,  662,   75,  653,  671,  659,   75,   75,  667,  672,
      669,   75,  665,  670,  663,  661,   75,  674,   75,   75,
      673,   75,  660,   75,  678,  676,  664,  662,   75,  677,
      671,   75,   75,  685,   75,  667,  672,  669,  665,  670,
      675,  682,  679,   75,  674,   75,  680,  673,  683,  681,
       75,  678,  676,  176,   75,  690,  677,   75,   75,  701,
      685,  687,   75,  684,  691,   75,  675,  682,  679,   75,
      686,  688,  680,  689,  683,  692,  681,  176,   75,  695,

       75,  690,  693,  701,   77,  109,  305,  698,  687,  684,
      691,  699,  710,   75,  852,  822,  686,  688,  694,  689,
      696,  304,  692,  705,   75,  695,   75,  706,  829,  693,
      703,  704,  703,  705,  708,  709,  708,  706,   75,  305,
      852,  710,  822,   73,  694,  710,  696,  711,  180,  711,
      705,  712,  302,  712,  706,  829,  107,  825,  710,  713,
      307,  713,  705,  714,  447,  714,  706,  117,  124,  716,
      710,   75,   73,  717,  719,  721,  722,  721,  723,  124,
     1054,   62,  724,  825,  352,  719,  726,  727,  726,  355,
      728,  723,   75,  728,  352,  724,  729,  216,  729,  723,

      728,   60,   75,  724,  730,  212,  730,  731,  357,  731,
      723,  728,  819,   60,  724,  732,  354,  732,  734,  735,
      736,   29,  728,  846,  737,  739,  740,  739,  741,  734,
     1054,  736,  724,  337,  200,  742,  744, 1054,  819,  747,
      745,  749,  750,  749,  751,  344, 1054,  754,  752,  846,
      346,  755,  756,  205,  756,  754,  758,  337, 1054,  755,
      760,  761,  760,  747,  486, 1054,  751,  762, 1054,  487,
      752,  763,  341,  763,  751,  762,  346,   75,  752, 1054,
     1054,  487,  758,  764,  349,  764,  754,  762, 1054,  832,
      755,  765,  484,  765,  766,  489,  766,  751,  762, 1054,

     1054,  752,  767,  491,  767,  768,  613,  768,  220,  758,
      770,  227,  762,  227,  771,  832, 1054,  773, 1054,  773,
      774,  230,  774,  770,  775,  368,  775,  771, 1054, 1054,
      506,  773,  776,  129,  776,  770,  783, 1054, 1054,  771,
      715,  777,  117,  777,  716,  715,  715,  715,  717,  715,
      715,  715,  715, 1054,  715,  715,  372,  372,  780,  780,
     1054, 1054,  781,  781,  785,  786,  785,  787,  506, 1054,
     1054,  788,   75,  633,  783,  787,  790,  791,  790,  788,
      715,  715,  715,  792,  793,  510,  793,  787,  634,  634,
       75,  788,  820,  952,  792,  792,  794,  632,  794,  795,

      636,  795,  787,  792,  641,  514,  788,  797, 1054, 1054,
      800,  798,  802,  803,  802,  804,  641, 1054,  820,  805,
      952,  812,  800,  807,  808,  807,  810,  809,  804, 1054,
      809, 1054,  805,  811,  645,  811,  804,  117,   75,  716,
      805,   75,  514,  717,  797,  117, 1054,  716,  798,   75,
      117,  717,  716,  117,  826,  716,  717,   75,  821,  717,
      117,  117,  716,  716,  813,   75,  717,  717,  955,   75,
       75,  823,   75,  827,   75,  818,   75,  815,  831,  824,
      826,  814,   75,   75,  821,   75,  816,  828,  830,  834,
      813,   75,   75,  817,  955,  833,   75, 1054,  823,  827,

      836,  839,  818,  815,   75,  831,  824,  814,  841,  837,
       75,  835,  816,  828,  830,  834,  838,   75,   75,  817,
      842,  840,  833,   75,  843,   75,  836,  839,   75,  845,
      851,   75,   75, 1054,  841,  837,   75,  835,  844,   75,
       75,  176,   75,  838,  929, 1054,  842,  701,  840,  847,
      854,  843,  853,  848,  849, 1054,  845,  851,   75,  109,
      932,  698, 1054, 1054,  844,  699,  855,  856,  855,  705,
      176,  929, 1054,  706, 1054,  847,  701,  854,  853,  848,
      849,  857,  858,  857,  304, 1054,  705,  932,  710,  305,
      706,  703,  704,  703,  705,  710, 1054,  305,  706,  859,

      860,  859,  705,  710, 1054,   75,  706,  708,  709,  708,
      861,  862,  861,   75,  710,  927, 1054,  710,  711,  180,
      711,  705,  712,  302,  712,  706, 1054, 1054,  950,  710,
      713,  307,  713,  705,  714,  447,  714,  706,  117,  124,
      716,  710,  927,   75,  717,  719,  863,  864,  863,  723,
      124, 1054,   75,  724,  950,  352,  719,  865,  866,  865,
      355,  728,  723,  946,  728,  352,  724,  721,  722,  721,
      723,  728, 1054,  930,  724,  867,  868,  867,  723,  726,
      727,  726,  724,  869,  870,  869,  728, 1054, 1054,  946,
      728,  729,  216,  729,  723,  730,  212,  730,  724,  930,

     1054, 1054,  728,  731,  357,  731,  723,  732,  354,  732,
      724,  734,   75,  736,  728,  872,  884,  742,  734,  735,
      736,  873,  728,   75,  737,  875,  876,  875,  877,  879,
      931,  741,  878, 1054, 1054,  724,  739,  740,  739,  741,
      881,  995,  882,  724, 1054, 1054,  224,  886,  887,  886,
      888,  200,  337,  744,  889, 1054,  931,  745,  747,  890,
      891,  890,  751,  337, 1054, 1054,  752,  995,  487,  747,
      892,  893,  892,  486,  762,  751, 1054,  762,  346,  752,
      749,  750,  749,  751,  758,   75,   75,  752,  894,  895,
      894,  751,  344,  942,  754,  752, 1054,  346,  755,  896,

      897,  896,  754,  758, 1025, 1054,  755,  756,  205,  756,
      754,  898,  899,  898,  755,  487, 1054, 1054,  758, 1054,
      942,  762,  760,  761,  760,  900,  901,  900, 1054,  762,
     1025,  227,  762,  763,  341,  763,  751,  773,   75, 1054,
      752,  764,  349,  764,  754,  765,  484,  765,  755, 1054,
     1054,  935,  762,  766,  489,  766,  751,  767,  491,  767,
      752,  768,  613,  768,  758,  220, 1054,  770,  762, 1054,
      227,  771,  902,  903,  902,  770,  773,  935,   75,  771,
      904,  905,  904,  774,  230,  774,  770,  773,  937,   75,
      771,  775,  368,  775,  776,  129,  776,  770,  773,  941,

     1054,  771,  715,  777,  117,  777,  716,  715,  715,  715,
      717,  715,  715,  715,  715,  937,  715,  715,  372,  372,
      780,  780,  506, 1054,  781,  781,  941,  506,  783,  906,
      907,  906,  787,  783, 1054,  633,  788,  787,  908,  909,
      908,  788,  715,  715,  715,  792,  785,  786,  785,  787,
      634, 1054, 1054,  788,   75,  634,  792,  910,  911,  910,
      787,  792, 1054, 1054,  788,  790,  791,  790,  912,  913,
      912,  956,  792, 1054, 1054,  792,  793,  510,  793,  787,
      794,  632,  794,  788, 1054, 1054, 1054,  792,  795,  636,
      795,  787,  514,  641,  797,  788,   75,  956,  798,  800,

      914,  915,  914,  804,  641, 1054,   75,  805, 1054,  812,
      800,  916,  917,  916,  810,  809,  804,  948,  809,  812,
      805,  802,  803,  802,  804,  809, 1054,  981,  805,  918,
      919,  918,  804,  807,  808,  807,  805,  920,  921,  920,
      809, 1054, 1054,  948,  809,  811,  645,  811,  804,  117,
     1054,  716,  805,  981,  514,  717,  797,  117, 1054,  716,
      798,   75,  117,  717,  716,  117,  938,  716,  717,   75,
      117,  717,  716,   75, 1054,  928,  717,   75,   75,   75,
      922,  939, 1054,  925,  934,  936,   75,  933,  923,   75,
      924,   75,   75,  938, 1054,  926,   75,  943,   75,  940,

      945,  944,  928,   75,   75,  951,  922,  958,  939,  947,
      925,  934,  936,  933,  923, 1054,  924,   75,  979,   75,
       75,  926, 1054,  949,  943,  940,  953,  945,  944,   75,
     1054,  951,   75,  958, 1013,  954,  947,  872,  957,  855,
      856,  855,  705,  873,  979,  965,  706,  857,  858,  857,
      949,  966, 1054,  953,  710,  970,  859,  860,  859,  705,
     1013,  365,  954,  706, 1054,  957,  861,  862,  861,  863,
      864,  863,  723,  710, 1054, 1054,  724,  865,  866,  865,
      867,  868,  867,  723,  728, 1054, 1054,  724,  869,  870,
      869,  960,  961,  960,  963,  728,  877, 1054,  962,  884,

      878,  875,  876,  875,  877,  728, 1054, 1054,  878,  967,
      968,  967,  877,  881, 1054,  882,  878, 1054,  881,  224,
      882,  881,   75,  882,  224,  974,  973,  224,  888, 1054,
     1054,  962,  889,  886,  887,  886,  888,   75, 1054,  982,
      889,  975,  976,  975,  888, 1054,   75, 1054,  889,  890,
      891,  890,  751,  892,  893,  892,  752,  992, 1054, 1054,
      762,  894,  895,  894,  751,  982,   75,  989,  752,  896,
      897,  896,  754,  898,  899,  898,  755,  900,  901,  900,
      758, 1031, 1054,  992,  762,  902,  903,  902,  770,  904,
      905,  904,  771,  989, 1054, 1054,  773,  906,  907,  906,

      787,  908,  909,  908,  788, 1054,   75, 1031,  792,  910,
      911,  910,  787,  912,  913,  912,  788, 1054, 1054,  980,
      792,  914,  915,  914,  804,  916,  917,  916,  805,   75,
       75,  984,  809,  918,  919,  918,  804,  920,  921,  920,
      805,  117, 1054,  716,  809,  980,  514,  717,  797,  117,
     1005,  716,  798,   75,  514,  717,  797,  983,  984,  514,
      798,  797,   75,  977,  985,  798,   75,   75,  986,   75,
       75,  988,   75,   75,  993,   75, 1005, 1054,   75,  994,
     1027,   75,  978,  987,  983, 1054,  990,  996, 1054, 1054,
      977,  985, 1054,   75,  991,  986,   75,  974,  988,  997,

     1054,  993,  998,  962,  965,  970,  994, 1027,  978,  987,
      966,  365,  990, 1054,  996,  960,  961,  960,   75,   75,
      991, 1054,  962,  999, 1000,  999,  997,   75, 1009,  998,
      962, 1001, 1002, 1001,  967,  968,  967,  877,  966, 1006,
     1007,  878,  975,  976,  975,  888,  117,   75,  716,  889,
       75,  117,  717,  716,   75, 1009,   75,  717,   75,   75,
     1008,   75, 1014,   75,   75, 1006, 1007, 1012,   75, 1054,
     1010, 1017,   75,  514, 1003,  797, 1011, 1015, 1019,  798,
     1020, 1016, 1004, 1018,   75, 1054, 1008, 1054,   75, 1014,
      999, 1000,  999, 1012, 1022,   75, 1010,  962, 1017, 1054,

     1003, 1024, 1011, 1015, 1023, 1019, 1020, 1016, 1004, 1018,
     1001, 1002, 1001,  117,   75,  716,   75,  966,   75,  717,
     1026, 1022, 1028,   75, 1029,   75,   75,   75, 1024, 1030,
     1023, 1033,  514,   75,  797, 1032,   75,   75,  798,   75,
     1021,   75,   75, 1038,   75, 1054,   75, 1026, 1034, 1028,
     1054, 1029, 1037,   75, 1035, 1039, 1030, 1036, 1033, 1054,
       75, 1041, 1032,   75, 1045, 1040, 1021, 1042, 1054, 1043,
     1038,   75,   75, 1047, 1034, 1054, 1054,   75, 1044, 1037,
     1035, 1039, 1046, 1036,   75, 1054,   75, 1041, 1051, 1054,
     1045, 1040, 1048,   75, 1042, 1043,   75,   75, 1054, 1049,

     1047, 1050, 1052, 1053, 1044, 1054, 1054, 1054, 1054, 1046,
     1054, 1054, 1054, 1054, 1054, 1051, 1054, 1054, 1048, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1049, 1050, 1054, 1052,
     1053,   27,   27,   27,   27,   27,   30,   30,   30,   30,
       30,   45,   45,   45,   45,   45,   49,   49,   49,   49,
       49,   53,   53,   53,   53,   53,   59,   59,   59,   59,
       59,   61,   61,   61,   61,   61,   63,   63,   63,   63,
       63,   74,   74,   78, 1054,   78,   78,  106,  106,  106,
      106,  106,  108,  108,  108,  108,  108,  112,  112,  112,
      112,  112,  120,  120,  120,  120,  120,  123,  123,  123,

      123,  123,  116,  116,  116,  116,  116,  127,  127,  127,
      127,  127,  138,  138,  138,  138,   76, 1054,   76,   77,
     1054,   77,  169,  169,  169,  169,  169,  172,  172,  172,
      172,  172,  175,  175,  175,  175,  175,  178,  178,  178,
      178,  178,  183,  183,  183,  183,  183,  186,  186,  186,
      186,  186,  190,  190,  190,  190,  190,  194,  194,  194,
      194,  194,  197,  197,  197,  197,  197,  199,  199,  199,
      199,  199,  203,  203,  203,  203,  203,  208,  208,  208,
      208,  208,  210,  210,  210,  210,  210,  214,  214,  214,
      214,  214,  219,  219,  219,  219,  219,  224,  224,  224,

      224,  224,  226,  226,  226,  226,  226,  232,  232,  232,
      232,  232,  286,  286,  286,  286,  286,  289,  289,  289,
      289,  289,  291,  291,  291,  291,  291,  295,  295,  295,
      295,  295,  300,  300,  300,  300,  300,  308,  308,  308,
      308,  308,  313,  313,  313,  313,  313,  316,  316,  316,
      316,  316,  318,  318,  318,  318,  318,  323,  323,  323,
      323,  323,  326,  326,  326,  326,  326,  329,  329,  329,
      329,  329,  333,  333,  333,  333,  333,  336,  336,  336,
      336,  336,  339,  339,  339,  339,  339,  345,  345,  345,
      345,  345,  358,  358,  358,  358,  358,  361,  361,  361,

      361,  361,  365,  365,  365,  365,  365,  370,  370,  370,
      370,  370,  371,  371,  371,  371,  371,  431,  431,  431,
      431,  431,  434,  434,  434,  434,  434,  436,  436,  436,
      436,  436,  440,  440,  440,  440,  440,  295,  295,  295,
      295,  295,  448,  448,  448,  448,  448,  451,  451,  451,
      451,  451,  453,  453,  453,  453,  453,  457,  457,  457,
      457,  457,  462,  462,  462,  462,  462,  465,  465,  465,
      465,  465,  468,  468,  468,  468,  468,  472,  472,  472,
      472,  472,  474,  474,  474,  474,  474,  478,  478,  478,
      478,  478,  482,  482,  482,  482,  482,  492,  492,  492,

      492,  492,  495,  495,  495,  495,  495,  501,  501,  501,
      501,  501,  502,  502,  502,  502,  502,  172,  172,  172,
      172,  172,  505,  505,  505,  505,  505,  508,  508,  508,
      508,  508,  513,  513,  513,  513,  513,  568,  568,  568,
      568,  568,  571,  571,  571,  571,  571,  573,  573,  573,
      573,  573,  576,  576,  576,  576,  576,  580,  580,  580,
      580,  580,  583,  583,  583,  583,  583,  585,  585,  585,
      585,  585,  588,  588,  588,  588,  588,  595,  595,  595,
      595,  595,  598,  598,  598,  598,  598,  601,  601,  601,
      601,  601,  603,  603,  603,  603,  603,  606,  606,  606,

      606,  606,  608,  608,  608,  608,  608,  614,  614,  614,
      614,  614,  616,  616,  616,  616,  616,  621,  621,  621,
      621,  621,  622,  622,  622,  622,  622,  625,  625,  625,
      625,  625,  627,  627,  627,  627,  627,  208,  208,  208,
      208,  208,  630,  630,  630,  630,  630,  637,  637,  637,
      637,  637,  172,  172,  172,  172,  172,  640,  640,  640,
      640,  640,  643,  643,  643,  643,  643,  697,  697,  697,
      697,  697,  700,  700,  700,  700,  700,  702,  702,  702,
      702,  702,  707,  707,  707,  707,  707,  715,  715,  715,
      715,  715,  718,  718,  718,  718,  718,  720,  720,  720,

      720,  720,  725,  725,  725,  725,  725,  733,  733,  733,
      733,  733,  738,  738,  738,  738,  738,  743,  743,  743,
      743,  743,  746,  746,  746,  746,  746,  748,  748,  748,
      748,  748,  753,  753,  753,  753,  753,  757,  757,  757,
      757,  757,  759,  759,  759,  759,  759,  769,  769,  769,
      769,  769,  772,  772,  772,  772,  772,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  782,  782,  782,
      782,  782,  784,  784,  784,  784,  784,  789,  789,  789,
      789,  789,  224,  224,  224,  224,  224,  796,  796,  796,
      796,  796,  799,  799,  799,  799,  799,  801,  801,  801,

      801,  801,  208,  208,  208,  208,  208,  806,  806,  806,
      806,  806,  172,  172,  172,  172,  172,  871,  871,  871,
      871,  871,  874,  874,  874,  874,  874,  738,  738,  738,
      738,  738,  880,  880,  880,  880,  880,  883,  883,  883,
      883,  883,  885,  885,  885,  885,  885,  743,  743,  743,
      743,  743,  746,  746,  746,  746,  746,  748,  748,  748,
      748,  748,  759,  759,  759,  759,  759,  753,  753,  753,
      753,  753,  757,  757,  757,  757,  757,  769,  769,  769,
      769,  769,  772,  772,  772,  772,  772,  778,  778,  778,
      778,  778,  779,  779,  779,  779,  779,  782,  782,  782,

      782,  782,  784,  784,  784,  784,  784,  789,  789,  789,
      789,  789,  796,  796,  796,  796,  796,  799,  799,  799,
      799,  799,  801,  801,  801,  801,  801,  806,  806,  806,
      806,  806,   74,   74,  702,  702,  702,  702,  702,  707,
      707,  707,  707,  707,  720,  720,  720,  720,  720,  725,
      725,  725,  725,  725,  208,  208,  208,  208,  208,  959,
      959,  959,  959,  959,  874,  874,  874,  874,  874,  964,
      964,  964,  964,  964,  880,  880,  880,  880,  880,  969,
      969,  969,  969,  969,  883,  883,  883,  883,  883,  971,
      971, 1054,  971,  971,  885,  885,  885,  885,  885,  748,

      748,  748,  748,  748,  753,  753,  753,  753,  753,  757,
      757,  757,  757,  757,  769,  769,  769,  769,  769,  772,
      772,  772,  772,  772,   21, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054

    } ;

static yyconst flex_int16_t yy_chk[4492] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    7, 1053,    8,   24,
     1052,    9,   32,    7,    7,    8,    8,   10,   66,   24,
       13,   14,  109,  110,   66,   32,  109,   13,   14,  110,
        1,    1,    1,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    9,
        9,   32,   30,   30,   11,   10,   10,   12,   13,   14,
       30,   11,   44,   41,   12, 1049,   63,   11,   63,   41,
       12,   44,   63,    2,    2,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,   11, 1048, 1044,   12,   41,   15,   44,   15,
       15,   15, 1038,   64,   15,   64,   67,   15,   67,   64,
      113, 1036,   67,   83,  113,   83,    3,    3,    3,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,   15,   16,   79,   16,   16,
       16,   34,   83,   16,   72,   31,   16,   38,   31,  114,
       78,   78,   40,   39,   72,  114,   79,   34,   78,    4,
        4,    4,    5,   38,   31,   42,  108, 1030,  108,   39,
       40,   42,  108,   40,   16,   31,    5,    5,    5,    5,
        5,    5,   79,   34,    5, 1029,   42,    5,    5,   38,

       31,    5,    5,    5,    5,   39,   40,    5,   42,   40,
      186,   95,  186,    5,    5,    5,    5,    5,    5,   95,
     1028,    5,   42,    5,    5,   80,   35,    5,    5,    5,
        5,   81,   97,    5,   20,   20,   20,   20,   36,   35,
       20,   35,   37,   20,   80,   20,   95,   81,   97,   37,
       20,   20, 1027,   82,   36, 1026,   37,   37,   84,   36,
       84,   68,   68,   68,   68,   35,  101,   35,   68,  101,
       80,   91,   82,   81,   97,   43,   37,   20,   20,   33,
       36,   33,   37,   37,   43,   36,   91,   84,   33,  117,
      172,   43,   33,  117,  172,   33,  101,   33,   82, 1023,

       43,   87, 1013,  119,   94,   85,   86,   90,   33,  119,
      200,   43,   91, 1012,  200,   33,   86,   43,   33,   85,
       85,   33,   87,   33,   94,   90,   43,   65,   65,   65,
       65,   65,   65,   65, 1006,   65,   65,   65,   65,   65,
       65,   65,   65,   86,   98,   85,   85,  998,   87,  123,
       94,   90,  997,   96,  112,  123,  112,   88,   96,  116,
      112,  116,   98,   88,  436,  116,  436,   65,   65,   69,
       69,   69,   69,   69,   69,   69,   88,   69,   69,   69,
       69,   69,   69,   69,   69,   96,   93,   89,   98,  104,
       88,   99,   89,   99,  102,   99,  115,  115,  115,  115,

      102,  372,   88,   93,  100,  372,  104,   89,   89,   69,
       69,   70,   70,   70,   70,  105,  139,  100,   70,   89,
       99,  105,   99,  125,  125,  125,   70,  102,  996,   93,
      125,  990,  104,   89,   89,  130,  139,   70,  976,  973,
       70,  130,   70,  100,  111,  111,  111,  111,  105,   70,
      120,  111,  120,   70,  143,  166,  120,  121,  121,  121,
      121,  972,  139,   70,  121,  127,   70,  127,   70,  514,
      166,  127,  143,  514,  971,   70,  118,  118,  118,  118,
      118,  118,  118,  970,  118,  118,  118,  118,  118,  118,
      118,  118,  126,  126,  126,  126,  166,  145,  143,  126,

      128,  128,  128,  128,  968,  146,  142,  128,  131,  131,
      131,  131,  142,  963,  145,  131,  118,  118,  122,  122,
      122,  122,  122,  122,  122,  146,  122,  122,  122,  122,
      122,  122,  122,  122,  957,  136,  169,  136,  169,  142,
      145,  136,  169,  185,  185,  185,  170,  954,  133,  141,
      133,  146,  170,  141,  133,  953,  949,  136,  122,  122,
      132,  132,  132,  132,  132,  132,  132,  132,  132,  132,
      132,  132,  132,  133,  132,  132,  134,  144,  134,  133,
      141,  135,  134,  135,  136,  148,  147,  135,  148,  946,
      134,  150,  154,  152,  154,  149,  144,  150,  135,  133,

      132,  132,  132,  140,  134,  133,  147,  135,  135,  149,
      137,  152,  137,  140,  157,  148,  137,  134,  156,  140,
      157,  154,  144,  159,  150,  135,  137,  153,  243,  453,
      134,  453,  147,  135,  135,  149,  243,  152,  155,  156,
      140,  153,  155,  161,  159,  140,  468,  157,  468,  161,
      943,  244,  158,  137,  151,  244,  151,  151,  151,  151,
      151,  151,  158,  243,  151,  156,  162,  153,  151,  155,
      159,  151,  163,  151,  151,  164,  161,  151,  165,  162,
      940,  164,  244,  151,  151,  151,  151,  151,  151,  158,
      936,  151,  165,  163,  151,  167,  165,  151,  160,  151,

      151,  167,  160,  151,  935,  162,  160,  168,  164,  171,
      171,  171,  171,  242,  173,  175,  171,  181,  165,  163,
      173,  175,  165,  181,  178,  168,  178,  931,  167,  160,
      178,  242,  929,  160,  174,  174,  174,  174,  177,  177,
      177,  179,  179,  179,  179,  177,  928,  247,  179,  247,
      183,  168,  182,  182,  182,  182,  183,  242,  919,  182,
      187,  187,  187,  187,  190,  191,  190,  209,  209,  209,
      190,  191,  192,  192,  192,  192,  247,  915,  911,  192,
      193,  193,  193,  193,  193,  193,  193,  907,  193,  193,
      193,  193,  193,  193,  193,  193,  194,  248,  194,  257,

      903,  197,  194,  195,  195,  195,  195,  197,  201,  206,
      195,  198,  198,  198,  201,  206,  248,  257,  198,  897,
      193,  193,  196,  196,  196,  196,  196,  196,  196,  895,
      196,  196,  196,  196,  196,  196,  196,  196,  199,  474,
      199,  474,  248,  257,  199,  202,  202,  202,  202,  203,
      210,  203,  202,  891,  887,  203,  210,  204,  204,  204,
      204,  884,  196,  196,  204,  207,  207,  207,  207,  211,
      211,  211,  207,  213,  213,  213,  211,  214,  876,  214,
      213,  266,  217,  214,  215,  215,  215,  215,  217,  872,
      266,  215,  218,  218,  218,  218,  219,  221,  219,  218,

      868,  864,  219,  221,  222,  222,  222,  222,  860,  856,
      226,  222,  223,  223,  223,  223,  226,  266,  844,  223,
      228,  228,  228,  229,  229,  229,  229,  228,  843,  826,
      229,  231,  231,  231,  231,  231,  231,  231,  231,  231,
      231,  231,  231,  231,  259,  231,  231,  232,  825,  232,
      233,  810,  233,  232,  245,  235,  233,  235,  234,  259,
      234,  235,  803,  236,  234,  236,  245,  786,  237,  236,
      237,  231,  231,  231,  237,  233,  234,  239,  238,  239,
      238,  251,  287,  239,  238,  259,  235,  240,  287,  240,
      237,  251,  245,  240,  236,  246,  241,  249,  241,  253,

      246,  233,  241,  234,  238,  253,  254,  238,  263,  239,
      249,  250,  235,  250,  750,  252,  254,  237,  251,  240,
      236,  241,  255,  258,  256,  264,  263,  246,  252,  254,
      238,  264,  253,  238,  265,  239,  249,  256,  269,  258,
      250,  255,  261,  254,  262,  240,  264,  241,  260,  261,
      267,  269,  263,  270,  252,  254,  271,  261,  264,  265,
      262,  722,  272,  256,  260,  258,  274,  255,  704,  260,
      272,  276,  264,  270,  271,  267,  261,  269,  273,  274,
      272,  275,  273,  261,  279,  265,  262,  275,  280,  276,
      260,  281,  280,  284,  282,  260,  691,  272,  284,  270,

      271,  267,  279,  686,  684,  274,  272,  281,  284,  273,
      282,  285,  681,  671,  275,  276,  286,  285,  286,  280,
      661,  289,  286,  288,  288,  288,  288,  289,  279,  660,
      288,  293,  492,  281,  492,  284,  282,  293,  290,  290,
      290,  291,  645,  291,  285,  290,  295,  291,  292,  292,
      292,  292,  295,  641,  636,  292,  294,  294,  294,  294,
      297,  297,  297,  294,  298,  298,  298,  298,  300,  301,
      301,  301,  633,  692,  300,  387,  301,  303,  303,  303,
      306,  306,  306,  306,  303,  387,  314,  306,  309,  309,
      309,  313,  314,  313,  398,  692,  316,  313,  315,  315,

      315,  315,  316,  398,  320,  315,  317,  317,  317,  318,
      320,  318,  387,  317,  327,  318,  319,  319,  319,  319,
      327,  692,  331,  319,  321,  321,  321,  321,  331,  567,
      398,  321,  322,  322,  322,  322,  322,  322,  322,  556,
      322,  322,  322,  322,  322,  322,  322,  322,  323,  554,
      323,  350,  350,  350,  323,  324,  324,  324,  324,  326,
      397,  326,  324,  333,  329,  326,  329,  397,  539,  333,
      329,  527,  322,  322,  325,  325,  325,  325,  325,  325,
      325,  511,  325,  325,  325,  325,  325,  325,  325,  325,
      328,  328,  328,  328,  397,  510,  336,  328,  330,  330,

      330,  330,  336,  506,  495,  330,  332,  332,  332,  332,
      334,  334,  334,  332,  325,  325,  493,  334,  335,  335,
      335,  338,  338,  338,  339,  335,  339,  412,  338,  342,
      339,  340,  340,  340,  340,  342,  489,  345,  340,  343,
      343,  343,  343,  345,  412,  393,  343,  347,  347,  347,
      348,  348,  348,  348,  347,  393,  486,  348,  353,  353,
      353,  356,  356,  356,  356,  353,  359,  358,  356,  358,
      412,  482,  359,  358,  360,  360,  360,  360,  361,  734,
      478,  360,  393,  734,  361,  362,  362,  362,  363,  363,
      363,  363,  362,  476,  470,  363,  364,  364,  364,  364,

      367,  367,  367,  364,  385,  400,  385,  367,  369,  369,
      369,  369,  369,  369,  369,  369,  369,  369,  369,  369,
      369,  400,  369,  369,  370,  371,  370,  371,  373,  457,
      370,  371,  455,  385,  373,  374,  374,  374,  374,  375,
      390,  375,  374,  440,  390,  375,  438,  400,  369,  369,
      369,  376,  377,  376,  377,  430,  414,  376,  377,  378,
      379,  378,  379,  406,  402,  378,  379,  380,  381,  380,
      381,  390,  386,  380,  381,  388,  382,  378,  382,  383,
      388,  383,  382,  377,  365,  383,  379,  386,  357,  399,
      382,  355,  349,  381,  389,  380,  392,  384,  382,  384,

      389,  383,  392,  384,  378,  396,  391,  388,  399,  377,
      394,  391,  379,  386,  394,  384,  391,  382,  395,  381,
      396,  380,  401,  403,  395,  382,  408,  389,  383,  392,
      404,  408,  401,  407,  399,  405,  409,  411,  391,  413,
      411,  394,  384,  391,  403,  413,  396,  410,  404,  415,
      405,  395,  409,  407,  416,  344,  341,  417,  408,  401,
      410,  419,  415,  417,  416,  418,  337,  411,  419,  425,
      403,  418,  413,  420,  404,  420,  405,  421,  409,  407,
      422,  424,  423,  421,  423,  422,  410,  426,  415,  425,
      417,  416,  426,  427,  429,  419,  311,  431,  418,  431,

      424,  432,  420,  431,  435,  435,  435,  432,  308,  307,
      421,  423,  422,  429,  427,  425,  304,  299,  434,  426,
      433,  433,  433,  433,  434,  296,  424,  437,  437,  437,
      437,  439,  439,  439,  439,  441,  441,  441,  283,  429,
      427,  442,  442,  442,  443,  443,  443,  443,  444,  444,
      444,  446,  446,  446,  448,  449,  448,  452,  452,  452,
      448,  449,  450,  450,  450,  450,  451,  454,  454,  454,
      454,  278,  451,  456,  456,  456,  456,  458,  458,  458,
      459,  459,  459,  460,  460,  460,  460,  461,  461,  461,
      462,  466,  462,  461,  277,  268,  462,  466,  461,  463,

      463,  463,  463,  464,  464,  464,  465,  472,  465,  464,
      230,  225,  465,  472,  464,  467,  467,  467,  467,  469,
      469,  469,  469,  471,  471,  471,  471,  473,  473,  473,
      475,  475,  475,  475,  477,  477,  477,  477,  479,  479,
      479,  480,  480,  480,  480,  481,  481,  481,  483,  483,
      483,  485,  485,  485,  488,  488,  488,  488,  490,  490,
      490,  494,  494,  494,  494,  496,  496,  496,  497,  497,
      497,  497,  498,  498,  498,  499,  499,  499,  499,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  500,  224,  500,  500,  501,  502,  501,  502,  503,

      220,  501,  502,  216,  505,  503,  504,  504,  504,  504,
      505,  507,  507,  507,  508,  208,  508,  205,  189,  500,
      500,  500,  509,  509,  509,  509,  512,  512,  512,  512,
      513,  515,  513,  188,  184,  180,  513,  515,  516,  516,
      516,  516,  517,  518,  517,  518,  176,  541,  517,  518,
      519,  520,  519,  520,  531,  538,  519,  520,  521,  522,
      521,  522,  526,  541,  521,  522,  526,  523,  519,  523,
      528,  129,  528,  523,  531,  538,  521,  525,  520,  525,
      524,  522,  524,  525,  530,  534,  524,  523,  529,  541,
      529,  530,  532,  526,  523,  519,  524,  533,  532,  528,

      531,  538,  124,  521,  520,  536,  535,  536,  522,  534,
      544,  106,  103,  543,  523,  537,  533,  529,  530,  537,
      523,  535,  540,  524,  544,  532,  542,  545,  540,  545,
      542,  547,  537,  543,  536,  534,  546,  547,  550,  548,
      546,  549,  533,  553,  550,  549,  537,  535,  551,  549,
      544,  558,  555,  558,  561,  540,  545,  542,  537,  543,
      548,  553,  551,  552,  547,  557,  551,  546,  555,  552,
      562,  550,  549,  569,  560,  561,  549,  559,  565,  569,
      558,  560,   92,  557,  562,  563,  548,  553,  551,  694,
      559,  560,  551,  560,  555,  563,  552,  571,  564,  565,

      566,  561,  564,  571,   76,  568,  575,  568,  560,  557,
      562,  568,  575,  657,  694,  657,  559,  560,  564,  560,
      566,  573,  563,  573,   74,  565,  666,  573,  666,  564,
      570,  570,  570,  570,  572,  572,  572,  570,  662,  576,
      694,  572,  657,   73,  564,  576,  566,  574,  574,  574,
      574,  577,  577,  577,  574,  666,   61,  662,  577,  578,
      578,  578,  578,  579,  579,  579,  578,  580,  581,  580,
      579,   27,   26,  580,  581,  582,  582,  582,  582,  583,
       21,   19,  582,  662,  587,  583,  584,  584,  584,  585,
      587,  585,  654,  584,  588,  585,  586,  586,  586,  586,

      588,   18,  687,  586,  589,  589,  589,  590,  590,  590,
      590,  589,  654,   17,  590,  591,  591,  591,  592,  592,
      592,    6,  591,  687,  592,  593,  593,  593,  593,  594,
        0,  594,  593,  596,  595,  594,  595,    0,  654,  596,
      595,  597,  597,  597,  597,  598,    0,  598,  597,  687,
      600,  598,  599,  599,  599,  599,  600,  601,    0,  599,
      602,  602,  602,  601,  603,    0,  603,  602,    0,  605,
      603,  604,  604,  604,  604,  605,  606,  669,  604,    0,
        0,  608,  606,  607,  607,  607,  607,  608,    0,  669,
      607,  609,  609,  609,  610,  610,  610,  610,  609,    0,

        0,  610,  611,  611,  611,  612,  612,  612,  614,  611,
      614,  615,  612,  616,  614,  669,    0,  615,    0,  616,
      617,  617,  617,  617,  618,  618,  618,  617,    0,    0,
      623,  618,  619,  619,  619,  619,  623,    0,    0,  619,
      620,  620,  620,  620,  620,  620,  620,  620,  620,  620,
      620,  620,  620,    0,  620,  620,  621,  622,  621,  622,
        0,    0,  621,  622,  624,  624,  624,  624,  625,    0,
        0,  624,  655,  627,  625,  627,  626,  626,  626,  627,
      620,  620,  620,  626,  628,  628,  628,  628,  629,  630,
      848,  628,  655,  848,  629,  630,  631,  631,  631,  635,

      635,  635,  635,  631,  638,  637,  635,  637,    0,    0,
      638,  637,  639,  639,  639,  639,  640,    0,  655,  639,
      848,  646,  640,  642,  642,  642,  643,  646,  643,    0,
      642,    0,  643,  644,  644,  644,  644,  647,  656,  647,
      644,  663,  648,  647,  648,  649,    0,  649,  648,  851,
      650,  649,  650,  651,  663,  651,  650,  664,  656,  651,
      652,  653,  652,  653,  647,  658,  652,  653,  851,  665,
      667,  658,  659,  664,  668,  653,  672,  650,  668,  659,
      663,  649,  674,  677,  656,  670,  651,  665,  667,  672,
      647,  673,  679,  652,  851,  670,  675,    0,  658,  664,

      674,  677,  653,  650,  680,  668,  659,  649,  679,  675,
      676,  673,  651,  665,  667,  672,  676,  678,  682,  652,
      680,  678,  670,  683,  682,  685,  674,  677,  693,  685,
      693,  688,  689,    0,  679,  675,  690,  673,  683,  695,
      696,  698,  821,  676,  821,    0,  680,  698,  678,  688,
      696,  682,  695,  689,  690,    0,  685,  693,  824,  697,
      824,  697,    0,    0,  683,  697,  699,  699,  699,  699,
      700,  821,    0,  699,    0,  688,  700,  696,  695,  689,
      690,  701,  701,  701,  702,    0,  702,  824,  701,  705,
      702,  703,  703,  703,  703,  705,    0,  707,  703,  706,

      706,  706,  706,  707,    0,  819,  706,  708,  708,  708,
      710,  710,  710,  846,  708,  819,    0,  710,  711,  711,
      711,  711,  712,  712,  712,  711,    0,    0,  846,  712,
      713,  713,  713,  713,  714,  714,  714,  713,  715,  716,
      715,  714,  819,  840,  715,  716,  717,  717,  717,  717,
      718,    0,  822,  717,  846,  723,  718,  719,  719,  719,
      720,  723,  720,  840,  719,  725,  720,  721,  721,  721,
      721,  725,    0,  822,  721,  724,  724,  724,  724,  726,
      726,  726,  724,  728,  728,  728,  726,    0,    0,  840,
      728,  729,  729,  729,  729,  730,  730,  730,  729,  822,

        0,    0,  730,  731,  731,  731,  731,  732,  732,  732,
      731,  733,  823,  733,  732,  736,  741,  733,  735,  735,
      735,  736,  741,  952,  735,  737,  737,  737,  737,  738,
      823,  738,  737,    0,    0,  738,  739,  739,  739,  739,
      740,  952,  740,  739,    0,    0,  740,  742,  742,  742,
      742,  743,  744,  743,  742,    0,  823,  743,  744,  745,
      745,  745,  745,  746,    0,    0,  745,  952,  751,  746,
      747,  747,  747,  748,  751,  748,    0,  747,  754,  748,
      749,  749,  749,  749,  754, 1009,  836,  749,  752,  752,
      752,  752,  753,  836,  753,  752,    0,  757,  753,  755,

      755,  755,  755,  757, 1009,    0,  755,  756,  756,  756,
      756,  758,  758,  758,  756,  759,    0,    0,  758,    0,
      836,  759,  760,  760,  760,  762,  762,  762,    0,  760,
     1009,  770,  762,  763,  763,  763,  763,  770,  829,    0,
      763,  764,  764,  764,  764,  765,  765,  765,  764,    0,
        0,  829,  765,  766,  766,  766,  766,  767,  767,  767,
      766,  768,  768,  768,  767,  769,    0,  769,  768,    0,
      772,  769,  771,  771,  771,  771,  772,  829,  831,  771,
      773,  773,  773,  774,  774,  774,  774,  773,  831,  835,
      774,  775,  775,  775,  776,  776,  776,  776,  775,  835,

        0,  776,  777,  777,  777,  777,  777,  777,  777,  777,
      777,  777,  777,  777,  777,  831,  777,  777,  778,  779,
      778,  779,  780,    0,  778,  779,  835,  782,  780,  781,
      781,  781,  781,  782,    0,  784,  781,  784,  783,  783,
      783,  784,  777,  777,  777,  783,  785,  785,  785,  785,
      787,    0,    0,  785,  852,  789,  787,  788,  788,  788,
      788,  789,    0,    0,  788,  790,  790,  790,  792,  792,
      792,  852,  790,    0,    0,  792,  793,  793,  793,  793,
      794,  794,  794,  793,    0,    0,    0,  794,  795,  795,
      795,  795,  796,  797,  796,  795,  842,  852,  796,  797,

      798,  798,  798,  798,  799,    0,  932,  798,    0,  804,
      799,  800,  800,  800,  801,  804,  801,  842,  800,  806,
      801,  802,  802,  802,  802,  806,    0,  932,  802,  805,
      805,  805,  805,  807,  807,  807,  805,  809,  809,  809,
      807,    0,    0,  842,  809,  811,  811,  811,  811,  813,
        0,  813,  811,  932,  814,  813,  814,  815,    0,  815,
      814,  832,  816,  815,  816,  817,  832,  817,  816,  820,
      818,  817,  818,  827,    0,  820,  818,  833,  828,  830,
      813,  833,    0,  817,  828,  830,  834,  827,  815,  847,
      816,  837,  854,  832,    0,  818,  838,  837,  839,  834,

      839,  838,  820,  927,  841,  847,  813,  854,  833,  841,
      817,  828,  830,  827,  815,    0,  816,  845,  927,  987,
      849,  818,    0,  845,  837,  834,  849,  839,  838,  850,
        0,  847,  853,  854,  987,  850,  841,  871,  853,  855,
      855,  855,  855,  871,  927,  877,  855,  857,  857,  857,
      845,  877,    0,  849,  857,  882,  859,  859,  859,  859,
      987,  882,  850,  859,    0,  853,  861,  861,  861,  863,
      863,  863,  863,  861,    0,    0,  863,  865,  865,  865,
      867,  867,  867,  867,  865,    0,    0,  867,  869,  869,
      869,  873,  873,  873,  874,  869,  874,    0,  873,  883,

      874,  875,  875,  875,  875,  883,    0,    0,  875,  878,
      878,  878,  878,  879,    0,  879,  878,    0,  880,  879,
      880,  881,  933,  881,  880,  888,  885,  881,  885,    0,
        0,  888,  885,  886,  886,  886,  886,  948,    0,  933,
      886,  889,  889,  889,  889,    0,  944,    0,  889,  890,
      890,  890,  890,  892,  892,  892,  890,  948,    0,    0,
      892,  894,  894,  894,  894,  933, 1017,  944,  894,  896,
      896,  896,  896,  898,  898,  898,  896,  900,  900,  900,
      898, 1017,    0,  948,  900,  902,  902,  902,  902,  904,
      904,  904,  902,  944,    0,    0,  904,  906,  906,  906,

      906,  908,  908,  908,  906,    0,  930, 1017,  908,  910,
      910,  910,  910,  912,  912,  912,  910,    0,    0,  930,
      912,  914,  914,  914,  914,  916,  916,  916,  914,  937,
      979,  937,  916,  918,  918,  918,  918,  920,  920,  920,
      918,  922,    0,  922,  920,  930,  923,  922,  923,  924,
      979,  924,  923,  934,  925,  924,  925,  934,  937,  926,
      925,  926,  938,  922,  938,  926,  939,  941,  939,  942,
      950,  942,  945,  947,  950,  951,  979,    0, 1011,  951,
     1011,  955,  924,  941,  934,    0,  945,  955,    0,    0,
      922,  938,    0,  956,  947,  939,  958,  959,  942,  956,

        0,  950,  958,  959,  964,  969,  951, 1011,  924,  941,
      964,  969,  945,    0,  955,  960,  960,  960,  983,  980,
      947,    0,  960,  962,  962,  962,  956,  981,  983,  958,
      962,  966,  966,  966,  967,  967,  967,  967,  966,  980,
      981,  967,  975,  975,  975,  975,  977,  982,  977,  975,
      984,  978,  977,  978,  986,  983,  985,  978,  988,  989,
      982,  992,  988,  993,  995,  980,  981,  986,  991,    0,
      984,  992,  994, 1004,  977, 1004,  985,  989,  994, 1004,
      995,  991,  978,  993, 1007,    0,  982,    0, 1005,  988,
      999,  999,  999,  986, 1005, 1008,  984,  999,  992,    0,

      977, 1008,  985,  989, 1007,  994,  995,  991,  978,  993,
     1001, 1001, 1001, 1003, 1010, 1003, 1014, 1001, 1015, 1003,
     1010, 1005, 1014, 1016, 1015, 1018, 1019, 1020, 1008, 1016,
     1007, 1019, 1021, 1024, 1021, 1018, 1022, 1031, 1021, 1032,
     1003, 1034, 1025, 1031, 1033,    0, 1040, 1010, 1020, 1014,
        0, 1015, 1025, 1037, 1022, 1032, 1016, 1024, 1019,    0,
     1035, 1034, 1018, 1039, 1040, 1033, 1003, 1035,    0, 1037,
     1031, 1042, 1041, 1042, 1020,    0,    0, 1043, 1039, 1025,
     1022, 1032, 1041, 1024, 1047,    0, 1046, 1034, 1047,    0,
     1040, 1033, 1043, 1045, 1035, 1037, 1050, 1051,    0, 1045,

     1042, 1046, 1050, 1051, 1039,    0,    0,    0,    0, 1041,
        0,    0,    0,    0,    0, 1047,    0,    0, 1043,    0,
        0,    0,    0,    0,    0,    0, 1045, 1046,    0, 1050,
     1051, 1055, 1055, 1055, 1055, 1055, 1056, 1056, 1056, 1056,
     1056, 1057, 1057, 1057, 1057, 1057, 1058, 1058, 1058, 1058,
     1058, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060, 1060,
     1060, 1061, 1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062,
     1062, 1063, 1063, 1064,    0, 1064, 1064, 1065, 1065, 1065,
     1065, 1065, 1066, 1066, 1066, 1066, 1066, 1067, 1067, 1067,
     1067, 1067, 1068, 1068, 1068, 1068, 1068, 1069, 1069, 1069,

     1069, 1069, 1070, 1070, 1070, 1070, 1070, 1071, 1071, 1071,
     1071, 1071, 1072, 1072, 1072, 1072, 1073,    0, 1073, 1074,
        0, 1074, 1075, 1075, 1075, 1075, 1075, 1076, 1076, 1076,
     1076, 1076, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080,
     1080, 1080, 1081, 1081, 1081, 1081, 1081, 1082, 1082, 1082,
     1082, 1082, 1083, 1083, 1083, 1083, 1083, 1084, 1084, 1084,
     1084, 1084, 1085, 1085, 1085, 1085, 1085, 1086, 1086, 1086,
     1086, 1086, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1088, 1088, 1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090,

     1090, 1090, 1091, 1091, 1091, 1091, 1091, 1092, 1092, 1092,
     1092, 1092, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094,
     1094, 1094, 1095, 1095, 1095, 1095, 1095, 1096, 1096, 1096,
     1096, 1096, 1097, 1097, 1097, 1097, 1097, 1098, 1098, 1098,
     1098, 1098, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100,
     1100, 1100, 1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102,
     1102, 1102, 1103, 1103, 1103, 1103, 1103, 1104, 1104, 1104,
     1104, 1104, 1105, 1105, 1105, 1105, 1105, 1106, 1106, 1106,
     1106, 1106, 1107, 1107, 1107, 1107, 1107, 1108, 1108, 1108,
     1108, 1108, 1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110,

     1110, 1110, 1111, 1111, 1111, 1111, 1111, 1112, 1112, 1112,
     1112, 1112, 1113, 1113, 1113, 1113, 1113, 1114, 1114, 1114,
     1114, 1114, 1115, 1115, 1115, 1115, 1115, 1116, 1116, 1116,
     1116, 1116, 1117, 1117, 1117, 1117, 1117, 1118, 1118, 1118,
     1118, 1118, 1119, 1119, 1119, 1119, 1119, 1120, 1120, 1120,
     1120, 1120, 1121, 1121, 1121, 1121, 1121, 1122, 1122, 1122,
     1122, 1122, 1123, 1123, 1123, 1123, 1123, 1124, 1124, 1124,
     1124, 1124, 1125, 1125, 1125, 1125, 1125, 1126, 1126, 1126,
     1126, 1126, 1127, 1127, 1127, 1127, 1127, 1128, 1128, 1128,
     1128, 1128, 1129, 1129, 1129, 1129, 1129, 1130, 1130, 1130,

     1130, 1130, 1131, 1131, 1131, 1131, 1131, 1132, 1132, 1132,
     1132, 1132, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134,
     1134, 1134, 1135, 1135, 1135, 1135, 1135, 1136, 1136, 1136,
     1136, 1136, 1137, 1137, 1137, 1137, 1137, 1138, 1138, 1138,
     1138, 1138, 1139, 1139, 1139, 1139, 1139, 1140, 1140, 1140,
     1140, 1140, 1141, 1141, 1141, 1141, 1141, 1142, 1142, 1142,
     1142, 1142, 1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144,
     1144, 1144, 1145, 1145, 1145, 1145, 1145, 1146, 1146, 1146,
     1146, 1146, 1147, 1147, 1147, 1147, 1147, 1148, 1148, 1148,
     1148, 1148, 1149, 1149, 1149, 1149, 1149, 1150, 1150, 1150,

     1150, 1150, 1151, 1151, 1151, 1151, 1151, 1152, 1152, 1152,
     1152, 1152, 1153, 1153, 1153, 1153, 1153, 1154, 1154, 1154,
     1154, 1154, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,
     1156, 1156, 1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158,
     1158, 1158, 1159, 1159, 1159, 1159, 1159, 1160, 1160, 1160,
     1160, 1160, 1161, 1161, 1161, 1161, 1161, 1162, 1162, 1162,
     1162, 1162, 1163, 1163, 1163, 1163, 1163, 1164, 1164, 1164,
     1164, 1164, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166,
     1166, 1166, 1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168,
     1168, 1168, 1169, 1169, 1169, 1169, 1169, 1170, 1170, 1170,

     1170, 1170, 1171, 1171, 1171, 1171, 1171, 1172, 1172, 1172,
     1172, 1172, 1173, 1173, 1173, 1173, 1173, 1174, 1174, 1174,
     1174, 1174, 1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176,
     1176, 1176, 1177, 1177, 1177, 1177, 1177, 1178, 1178, 1178,
     1178, 1178, 1179, 1179, 1179, 1179, 1179, 1180, 1180, 1180,
     1180, 1180, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182,
     1182, 1182, 1183, 1183, 1183, 1183, 1183, 1184, 1184, 1184,
     1184, 1184, 1185, 1185, 1185, 1185, 1185, 1186, 1186, 1186,
     1186, 1186, 1187, 1187, 1187, 1187, 1187, 1188, 1188, 1188,
     1188, 1188, 1189, 1189, 1189, 1189, 1189, 1190, 1190, 1190,

     1190, 1190, 1191, 1191, 1191, 1191, 1191, 1192, 1192, 1192,
     1192, 1192, 1193, 1193, 1193, 1193, 1193, 1194, 1194, 1194,
     1194, 1194, 1195, 1195, 1195, 1195, 1195, 1196, 1196, 1196,
     1196, 1196, 1197, 1197, 1197, 1197, 1197, 1198, 1198, 1198,
     1198, 1198, 1199, 1199, 1199, 1199, 1199, 1200, 1200, 1200,
     1200, 1200, 1201, 1201, 1201, 1201, 1201, 1202, 1202, 1202,
     1202, 1202, 1203, 1203, 1203, 1203, 1203, 1204, 1204, 1204,
     1204, 1204, 1205, 1205, 1205, 1205, 1205, 1206, 1206, 1206,
     1206, 1206, 1207, 1207, 1207, 1207, 1207, 1208, 1208, 1208,
     1208, 1208, 1209, 1209, 1209, 1209, 1209, 1210, 1210, 1210,

     1210, 1210, 1211, 1211, 1211, 1211, 1211, 1212, 1212, 1212,
     1212, 1212, 1213, 1213, 1213, 1213, 1213, 1214, 1214, 1214,
     1214, 1214, 1215, 1215, 1215, 1215, 1215, 1216, 1216, 1216,
     1216, 1216, 1217, 1217, 1218, 1218, 1218, 1218, 1218, 1219,
     1219, 1219, 1219, 1219, 1220, 1220, 1220, 1220, 1220, 1221,
     1221, 1221, 1221, 1221, 1222, 1222, 1222, 1222, 1222, 1223,
     1223, 1223, 1223, 1223, 1224, 1224, 1224, 1224, 1224, 1225,
     1225, 1225, 1225, 1225, 1226, 1226, 1226, 1226, 1226, 1227,
     1227, 1227, 1227, 1227, 1228, 1228, 1228, 1228, 1228, 1229,
     1229,    0, 1229, 1229, 1230, 1230, 1230, 1230, 1230, 1231,

     1231, 1231, 1231, 1231, 1232, 1232, 1232, 1232, 1232, 1233,
     1233, 1233, 1233, 1233, 1234, 1234, 1234, 1234, 1234, 1235,
     1235, 1235, 1235, 1235, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1054

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 2 "lexer.l"
// $Id: lexer.l 205 2017-06-19 11:16:18Z willem_vermin $
#include <iostream>
#include <string>
#include <stack>
#include <vector>
#include "parser.h"
#include "findent.h"
#include "debug.h"
#define YY_DECL extern "C" int yylex()
std::stack<int>      start_stack;
std::string          lexer_name, lexer_stlabel, lexeri_number;
std::string          input_string;
int             lrlevel;
bool            lrreturn;
class line_prep pline;




//  following are keywords starting with c
#line 1866 "lexer.cpp"

#define INITIAL 0
#define state_identifier 1
#define state_keyword 2
#define state_lr 3
#define state_lrb 4
#define state_skip 5
#define state_skipall 6
#define state_skipnoop 7
#define state_error 8
#define state_findformat 9

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * _in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * _out_str  );

yy_size_t yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput (int c,char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	{
#line 29 "lexer.l"


#line 2099 "lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1055 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4425 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 31 "lexer.l"
{  D(O("ERROR");Y;); return ERROR; }
	YY_BREAK

case 2:
YY_RULE_SETUP
#line 34 "lexer.l"
{ D(O("lr+");O(lrlevel);Y;); lrlevel++; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "lexer.l"
{ D(O("lr-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LR;
		     }
		  }
		}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 50 "lexer.l"
{ D(O("lrbla");O(lrlevel);Y;); } 
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 51 "lexer.l"
{ D(O("lreol");O(lrlevel);Y;); yyless(0); BEGIN(start_stack.top()); }
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 56 "lexer.l"
{ D(O("lrb+");O(lrlevel);Y;); 
                  lrlevel++;
		}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 60 "lexer.l"
{ D(O("lrb-");O(lrlevel);Y;); 
                  lrlevel--;
		  if(lrlevel == 0)
		  {
		     D(O("state:");O(start_stack.top());O(lrreturn););
		     BEGIN(start_stack.top());
		     start_stack.pop();
		     if(lrreturn)
		     {
			return LRB;
		     }
		  }
		}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 74 "lexer.l"
{ D(O("lrbbla");O(lrlevel);Y;); 
		}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 77 "lexer.l"
{ D(O("lrbeol");O(lrlevel);Y;) 
                  yyless(0);
                  BEGIN(start_stack.top());
		}
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 85 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lr);
	     }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "lexer.l"
{  D(O("skipLPAREN");Y;);
		start_stack.push(YY_START);
		lrlevel  = 1;
		lrreturn = 0;
		BEGIN(state_lrb);
	     }
	YY_BREAK

case 12:
YY_RULE_SETUP
#line 100 "lexer.l"
{ D(O("NOSKIP");Y;);     return yytext[yyleng-1]; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 101 "lexer.l"
{ D(O("NOSKIPNOOP");Y;); return yytext[yyleng-1]; }
	YY_BREAK

case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 104 "lexer.l"
{ D(O("endSKIP");Y;);
               switch(YY_START)
	       {
                  case state_skip:
		     return SKIP;
	          case state_skipall:
		     return SKIPALL;
		  case state_skipnoop:
		     return SKIPNOOP;
	       }
	     }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 116 "lexer.l"
{ D(O("SKIP");Y;); }
	YY_BREAK


case 16:
YY_RULE_SETUP
#line 120 "lexer.l"
{ D(O("IDENTIFIER");Y;);  lexer_name = yytext; return IDENTIFIER;  }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 121 "lexer.l"
{ D(O("TIDENTIFIER");Y;); lexer_name = yytext; return TIDENTIFIER; }
	YY_BREAK


case 18:
YY_RULE_SETUP
#line 125 "lexer.l"
{ D(O("ABSTRACTINTERFACE");Y;); return ABSTRACTINTERFACE; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 126 "lexer.l"
{ D(O("ASSOCIATE");Y;);         return ASSOCIATE;         }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 127 "lexer.l"
{ D(O("ASSIGN");Y;);            return ASSIGN;            }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 128 "lexer.l"
{ D(O("BLOCK");Y;);             return BLOCK;             }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 129 "lexer.l"
{ D(O("BLOCKDATA");Y;);         return BLOCKDATA;         }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 130 "lexer.l"
{ D(O("CASEDEFAULT");Y);        return CASEDEFAULT;       }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 131 "lexer.l"
{ D(O("CASE");Y);               return CASE;              }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 132 "lexer.l"
{ D(O("CHARACTER");Y;);         return BASICTYPE;         }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 133 "lexer.l"
{ D(O("CLASSDEFAULT");Y);       return CLASSDEFAULT;      }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 134 "lexer.l"
{ D(O("CLASS");Y;);             return CLASS;             }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 135 "lexer.l"
{ D(O("CLASSIS");Y);            return CLASSIS;           }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 136 "lexer.l"
{ D(O("COMPLEX");Y;);           return BASICTYPE;         }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 137 "lexer.l"
{ D(O("CONTAINS");Y);           return CONTAINS;          }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 138 "lexer.l"
{ D(O("CRITICAL");Y;);          return CRITICAL;          }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 139 "lexer.l"
{ D(O("DO");Y;);                return DO;                }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 140 "lexer.l"
{ D(O("DOUBLECOMPLEX");Y;);     return BASICTYPE;         }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 141 "lexer.l"
{ D(O("DOUBLEPRECISION");Y;);   return BASICTYPE;         }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 142 "lexer.l"
{ D(O("ELEMENTAL");Y;);         return ELEMENTAL;         }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 143 "lexer.l"
{ D(O("ELSE");Y);               return ELSE;              }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 144 "lexer.l"
{ D(O("ELSEIF");Y);             return ELSEIF;            }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 145 "lexer.l"
{ D(O("ELSEWHERE");Y);          return ELSEWHERE;         }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 146 "lexer.l"
{ D(O("ENDASSOCIATE");Y;);      return ENDASSOCIATE;      }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "lexer.l"
{ D(O("ENDBLOCK");Y;);          return ENDBLOCK;          }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "lexer.l"
{ D(O("ENDBLOCKDATA");Y;);      return ENDBLOCKDATA;      }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "lexer.l"
{ D(O("ENDCRITICAL");Y;);       return ENDCRITICAL;       }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "lexer.l"
{ D(O("ENDDO");Y;);             return ENDDO;             }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 151 "lexer.l"
{ D(O("END");Y;);               return END;               }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 152 "lexer.l"
{ D(O("ENDENUM");Y;);           return ENDENUM;           }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 153 "lexer.l"
{ D(O("ENDFORALL");Y;);         return ENDFORALL;         }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 154 "lexer.l"
{ D(O("ENDFUNCTION");Y;);       return ENDFUNCTION;       }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 155 "lexer.l"
{ D(O("ENDIF");Y);              return ENDIF;             }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 156 "lexer.l"
{ D(O("ENDINTERFACE");Y;);      return ENDINTERFACE;      }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 157 "lexer.l"
{ D(O("ENDMODULE");Y;);         return ENDMODULE;         }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 158 "lexer.l"
{ D(O("ENDPROCEDURE");Y;);      return ENDPROCEDURE;      }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 159 "lexer.l"
{ D(O("ENDPROGRAM");Y;);        return ENDPROGRAM;        }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 160 "lexer.l"
{ D(O("ENDSELECT");Y);          return ENDSELECT;         }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 161 "lexer.l"
{ D(O("ENDSUBROUTINE");Y;);     return ENDSUBROUTINE;     }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 162 "lexer.l"
{ D(O("ENDSUBMODULE");Y;);      return ENDSUBMODULE;      }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 163 "lexer.l"
{ D(O("ENDTYPE");Y;);           return ENDTYPE;           }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 164 "lexer.l"
{ D(O("ENDWHERE");Y;);          return ENDWHERE;          }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 165 "lexer.l"
{ D(O("ENTRY");Y);              return ENTRY;             }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 166 "lexer.l"
{ D(O("ENUM");Y;);              return ENUM;              }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 167 "lexer.l"
{ D(O("FORALL");Y;);            return FORALL;            }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 168 "lexer.l"
{ D(O("FUNCTION");Y;);          return FUNCTION;          }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 169 "lexer.l"
{ D(O("IF");Y;);                return IF;                }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 170 "lexer.l"
{ D(O("IMPURE");Y;);            return IMPURE;            }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 171 "lexer.l"
{ D(O("INTEGER");Y;);           return BASICTYPE;         }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 172 "lexer.l"
{ D(O("INTERFACE");Y;);         return INTERFACE;         }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 173 "lexer.l"
{ D(O("LOGICAL");Y;);           return BASICTYPE;         }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 174 "lexer.l"
{ D(O("MODULE");Y);             return MODULE;            }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 175 "lexer.l"
{ D(O("MODULEPROCEDURE");Y);    return MODULEPROCEDURE;   }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 176 "lexer.l"
{ D(O("MODULESUBROUTINE");Y);   return MODULESUBROUTINE;  }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 177 "lexer.l"
{ D(O("MODULEFUNCTION");Y);     return MODULEFUNCTION;    }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 178 "lexer.l"
{ D(O("PROCEDURE");Y);          return PROCEDURE;         }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 179 "lexer.l"
{ D(O("PROGRAM");Y;);           return PROGRAM;           }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 180 "lexer.l"
{ D(O("PURE");Y;);              return PURE;              }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 181 "lexer.l"
{ D(O("REAL");Y;);              return BASICTYPE;         }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 182 "lexer.l"
{ D(O("RECURSIVE");Y;);         return RECURSIVE;         } 
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "lexer.l"
{ D(O("SELECTCASE");Y);         return SELECTCASE;        }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "lexer.l"
{ D(O("SELECTTYPE");Y);         return SELECTTYPE;        }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "lexer.l"
{ D(O("SUBMODULE");Y;);         return SUBMODULE;         }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 186 "lexer.l"
{ D(O("SUBROUTINE");Y;);        return SUBROUTINE;        }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 187 "lexer.l"
{ D(O("TO");Y;);                return TO;                }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 188 "lexer.l"
{ D(O("THEN");Y;);              return THEN;              }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 189 "lexer.l"
{ D(O("TYPE");Y;);              return TYPE;              }
	YY_BREAK
case 83:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 4;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 190 "lexer.l"
{ D(O("TYPEC");Y;);             return TYPEC;             }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 191 "lexer.l"
{ D(O("TYPEIS");Y);             return TYPEIS;            }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 192 "lexer.l"
{ D(O("WHERE");Y;);             return WHERE;             }
	YY_BREAK


case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 196 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 197 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 88:
/* rule 88 can match eol */
YY_RULE_SETUP
#line 198 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 89:
/* rule 89 can match eol */
YY_RULE_SETUP
#line 199 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 200 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 201 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 92:
/* rule 92 can match eol */
YY_RULE_SETUP
#line 202 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 93:
/* rule 93 can match eol */
YY_RULE_SETUP
#line 203 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 204 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 205 "lexer.l"
{ D(O("FREE");Y;);     return FREE;     }
	YY_BREAK
case 96:
/* rule 96 can match eol */
YY_RULE_SETUP
#line 206 "lexer.l"
{ D(O("FIXED");Y;);    return FIXED;    }
	YY_BREAK
case 97:
/* rule 97 can match eol */
YY_RULE_SETUP
#line 207 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 208 "lexer.l"
{ D(O("UNSURE");Y;);   return UNSURE;   }
	YY_BREAK

case 99:
YY_RULE_SETUP
#line 211 "lexer.l"
{
		   int type = pline.get_type(std::string(yytext));
                   D(O("found_special");O(type);O(pline.get_type_as_string(std::string(yytext)));Y;);
		   D(O("encoded line");O(pline.get_line_encoded()););
		    if (type == pline.type_string)
		    {
		       D(O("QSTRING"););
		       return QSTRING;
		    }
		    if (type == pline.type_stlabel)
		    {
		       lexer_stlabel = pline.get_value(std::string(yytext));
		       D(O("STLABEL");O(lexer_stlabel);Y;);
		       return STLABEL;
		    }
		    if (type == pline.type_dot_operator)
		    {
		       D(O("DOTOPERATOR"););
		       return DOTOPERATOR;
		    }
		    D(O("This should not happen"););
                }
	YY_BREAK
case 100:
/* rule 100 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
YY_LINENO_REWIND_TO(yy_cp - 1);
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 235 "lexer.l"
{  D(O("NAMED_LABEL");Y;);
                            lexer_name = yytext;
			    lexer_name.erase(lexer_name.size()-1);
                            return NAMED_LABEL;
			 }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 241 "lexer.l"
{  D(O("I_NUMBER");Y;);
                            lexer_name = yytext;
			    lexeri_number = yytext;
                            return I_NUMBER;
                         }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 247 "lexer.l"
{  D(O("LPAREN");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lr);
			 }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 254 "lexer.l"
{  D(O("LPARENB");Y;);
                            start_stack.push(YY_START);
			    lrlevel  = 1;
			    lrreturn = 1;
			    BEGIN(state_lrb);
			 }
	YY_BREAK
case 104:
/* rule 104 can match eol */
YY_RULE_SETUP
#line 261 "lexer.l"
{  D(O("BLANK");); return BLANK;      }
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 263 "lexer.l"
{  D(O("EOL"););   return EOL;        }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 264 "lexer.l"
{  D(O("BLA");Y;); return yytext[0];  }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 266 "lexer.l"
ECHO;
	YY_BREAK
#line 2821 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(state_identifier):
case YY_STATE_EOF(state_keyword):
case YY_STATE_EOF(state_lr):
case YY_STATE_EOF(state_lrb):
case YY_STATE_EOF(state_skip):
case YY_STATE_EOF(state_skipall):
case YY_STATE_EOF(state_skipnoop):
case YY_STATE_EOF(state_error):
case YY_STATE_EOF(state_findformat):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	yy_size_t number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (yy_size_t) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((int) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1055 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1055 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1054);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = (yy_size_t)size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
			(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 266 "lexer.l"



void lexer_set(class line_prep p)
{
   input_string  = p.get_line_encoded()+'\n';
   pline         = p;
   yy_delete_buffer(YY_CURRENT_BUFFER);
   BEGIN(INITIAL);
   yy_scan_string(input_string.c_str());
   D(O("lexer_set");O(input_string);O(p.get_type_as_string(0)););
}

void lexer_set(std::string s)
{
   input_string  = s+'\n';
   D(O("lexer_set");O(input_string););
   yy_delete_buffer(YY_CURRENT_BUFFER);
   yy_scan_string(input_string.c_str());
   BEGIN(state_findformat);
}

void lexer_enable(int k)
{
   switch(k)
   {
      case IDENTIFIER:  BEGIN(state_identifier);   break;
      case SKIPALL:     BEGIN(state_skipall);      break;
      case SKIP:        BEGIN(state_skip);         break;
      case SKIPNOOP:    BEGIN(state_skipnoop);     break;
      case KEYWORD:     BEGIN(state_keyword);      break;
      case FINDFORMAT:  BEGIN(state_findformat);   break;
      default:
	 D(O("invalid parameter in lexer_enable");O(k););
	 BEGIN(state_error);
	 break;
   }
   D(O("enabled");O(k);O(YY_START););
}

std::string lexer_getname()
{
   return lexer_name;
}

std::string lexer_getstlabel()
{
   return lexer_stlabel;
}
std::string lexer_geti_number()
{
   return lexeri_number;
}

void quiet_compiler()                   // to prevent warning about unused unput
{
   char *a=0;
   yyunput(1,a);
}


