Terminals unused in grammar

   SUBFUN
   DOWHILE
   DOCONCURRENT
   ASSIGNMENT
   PROCEDURE
   FINDFORMAT
   FREE
   FIXED
   UNSURE
   PROBFREE
   KEYWORD
   QSTRING
   HSTRING
   LRB
   DOTOPERATOR
   UNCLASSIFIED
   ERROR
   LAST_TOKEN


Grammar

    0 $accept: lline $end

    1 lline: labels line

    2 labels: empty
    3       | stlabel
    4       | named_label
    5       | stlabel named_label

    6 line: %empty
    7     | abstractinterface
    8     | assignment
    9     | associate
   10     | blank
   11     | block
   12     | blockdata
   13     | case
   14     | casedefault
   15     | classdefault
   16     | classis
   17     | contains
   18     | critical
   19     | do_construct
   20     | else
   21     | elseif
   22     | elsewhere
   23     | endassociate
   24     | endblock
   25     | endblockdata
   26     | endcritical
   27     | enddo
   28     | endenum
   29     | endforall
   30     | endfunction
   31     | endif
   32     | endinterface
   33     | endmodule
   34     | endprocedure
   35     | endprogram
   36     | endselect
   37     | endsubmodule
   38     | endsubroutine
   39     | endtype
   40     | endwhere
   41     | entry
   42     | enum
   43     | forall_construct
   44     | if_construct
   45     | interface
   46     | module
   47     | moduleprocedure
   48     | selectcase
   49     | selecttype
   50     | simple_end
   51     | subfun_stmt_bind
   52     | submodule
   53     | type
   54     | typeis
   55     | where_construct

   56 blank: BLANK

   57 stlabel: STLABEL getstlabel

   58 named_label: NAMED_LABEL

   59 module: MODULE enable_identifier IDENTIFIER getname EOL

   60 abstractinterface: ABSTRACTINTERFACE EOL

   61 contains: CONTAINS EOL

   62 interface: INTERFACE skipall

   63 moduleprocedure: MODULEPROCEDURE enable_identifier IDENTIFIER getname EOL

   64 subfun_stmt_bind: subfun_stmt SKIP

   65 subfun_stmt: subfunprefix subfun subfunname

   66 subfun: subfun_spec enable_identifier

   67 subfun_spec: SUBROUTINE
   68            | MODULESUBROUTINE
   69            | FUNCTION
   70            | MODULEFUNCTION
   71            | PROGRAM

   72 subfunname: IDENTIFIER enable_skip getname

   73 subfunprefix: empty
   74             | subfunprefix subfunprefix_spec

   75 subfunprefix_spec: ELEMENTAL
   76                  | IMPURE
   77                  | PURE
   78                  | RECURSIVE
   79                  | intrinsic_type_spec
   80                  | TYPEC LR
   81                  | CLASS LR

   82 submodule: SUBMODULE LR enable_identifier IDENTIFIER getname EOL

   83 intrinsic_type_spec: BASICTYPE
   84                    | BASICTYPE kind_selector

   85 kind_selector: '*' I_NUMBER
   86              | '*' LR
   87              | LR

   88 entry: ENTRY enable_identifier IDENTIFIER skipall

   89 endassociate: ENDASSOCIATE construct_name EOL

   90 endblock: ENDBLOCK construct_name EOL

   91 endblockdata: ENDBLOCKDATA construct_name EOL

   92 endcritical: ENDCRITICAL construct_name EOL

   93 enddo: ENDDO construct_name EOL

   94 endenum: ENDENUM EOL

   95 endforall: ENDFORALL construct_name EOL

   96 endfunction: ENDFUNCTION construct_name EOL

   97 endif: ENDIF construct_name EOL

   98 endinterface: ENDINTERFACE skipall

   99 endmodule: ENDMODULE construct_name EOL

  100 endprocedure: ENDPROCEDURE construct_name EOL

  101 endprogram: ENDPROGRAM construct_name EOL

  102 endselect: ENDSELECT skipall

  103 endsubmodule: ENDSUBMODULE construct_name EOL

  104 endsubroutine: ENDSUBROUTINE construct_name EOL

  105 endtype: ENDTYPE construct_name EOL

  106 endwhere: ENDWHERE construct_name EOL

  107 simple_end: END EOL

  108 assignment: lvalue '=' skipnoop
  109           | ASSIGN I_NUMBER TO enable_identifier IDENTIFIER EOL
  110           | ASSIGN I_NUMBER TO enable_identifier TIDENTIFIER EOL

  111 else: ELSE construct_name EOL

  112 elseif: ELSEIF LR THEN construct_name EOL

  113 elsewhere: ELSEWHERE LR construct_name EOL
  114          | ELSEWHERE construct_name EOL

  115 if_construct: IF LR THEN EOL

  116 where_construct: WHERE LR EOL

  117 forall_construct: FORALL LR EOL

  118 do_construct: do I_NUMBER getdolabel skipall
  119             | do IDENTIFIER skipall
  120             | do TIDENTIFIER skipall
  121             | do ',' skipall
  122             | do EOL

  123 do: DO enable_identifier

  124 selectcase: SELECTCASE LR EOL

  125 selecttype: SELECTTYPE LR skipall

  126 case: CASE LR skipall

  127 casedefault: CASEDEFAULT skipall

  128 classdefault: CLASSDEFAULT skipall

  129 classis: CLASSIS LR skipall

  130 typeis: TYPEIS LR skipall

  131 block: BLOCK EOL

  132 blockdata: BLOCKDATA construct_name EOL

  133 associate: ASSOCIATE LR EOL

  134 critical: CRITICAL EOL

  135 enum: ENUM ',' skipall

  136 type: type1 ',' skipall
  137     | type1 ':' skipall
  138     | type1 IDENTIFIER skipall

  139 type1: TYPE enable_identifier

  140 lvalue: IDENTIFIER
  141       | IDENTIFIER LR
  142       | TIDENTIFIER
  143       | TIDENTIFIER LR

  144 construct_name: enable_identifier empty
  145               | enable_identifier IDENTIFIER getname

  146 skipall: enable_skipall SKIPALL

  147 skipnoop: enable_skipnoop SKIPNOOP

  148 enable_identifier: %empty

  149 enable_skip: %empty

  150 enable_skipall: %empty

  151 enable_skipnoop: %empty

  152 getname: %empty

  153 getstlabel: %empty

  154 getdolabel: %empty

  155 empty: %empty


Terminals, with rules where they appear

$end (0) 0
'*' (42) 85 86
',' (44) 121 135 136
':' (58) 137
'=' (61) 108
error (256)
MODULE (258) 59
SUBFUN (259)
ENTRY (260) 88
SUBMODULE (261) 82
MODULESUBROUTINE (262) 68
MODULEFUNCTION (263) 70
END (264) 107
ENDSUBROUTINE (265) 104
ENDFUNCTION (266) 96
ENDPROGRAM (267) 101
ENDMODULE (268) 99
ENDSUBMODULE (269) 103
IF (270) 115
THEN (271) 112 115
ELSE (272) 111
ELSEIF (273) 112
ENDIF (274) 97
WHERE (275) 116
ENDWHERE (276) 106
FORALL (277) 117
ENDFORALL (278) 95
ELSEWHERE (279) 113 114
DO (280) 123
DOWHILE (281)
DOCONCURRENT (282)
ENDDO (283) 93
SELECTCASE (284) 124
SELECTTYPE (285) 125
ENDSELECT (286) 102
CASE (287) 126
CASEDEFAULT (288) 127
TYPEIS (289) 130
CLASSIS (290) 129
CLASSDEFAULT (291) 128
INTERFACE (292) 62
ABSTRACTINTERFACE (293) 60
ENDINTERFACE (294) 98
CONTAINS (295) 61
BLOCK (296) 131
ENDBLOCK (297) 90
BLOCKDATA (298) 132
ENDBLOCKDATA (299) 91
ASSOCIATE (300) 133
ENDASSOCIATE (301) 89
CRITICAL (302) 134
ENDCRITICAL (303) 92
ENUM (304) 135
ENDENUM (305) 94
ASSIGNMENT (306)
ASSIGN (307) 109 110
TO (308) 109 110
MODULEPROCEDURE (309) 63
PROCEDURE (310)
ENDPROCEDURE (311) 100
TIDENTIFIER (312) 110 120 142 143
BLANK (313) 56
FINDFORMAT (314)
FREE (315)
FIXED (316)
UNSURE (317)
PROBFREE (318)
IDENTIFIER (319) 59 63 72 82 88 109 119 138 140 141 145
SKIP (320) 64
SKIPALL (321) 146
SKIPNOOP (322) 147
KEYWORD (323)
ELEMENTAL (324) 75
IMPURE (325) 76
PURE (326) 77
RECURSIVE (327) 78
SUBROUTINE (328) 67
FUNCTION (329) 69
PROGRAM (330) 71
EOL (331) 59 60 61 63 82 89 90 91 92 93 94 95 96 97 99 100 101 103
    104 105 106 107 109 110 111 112 113 114 115 116 117 122 124 131
    132 133 134
NAMED_LABEL (332) 58
STLABEL (333) 57
TYPE (334) 139
ENDTYPE (335) 105
CLASS (336) 81
BASICTYPE (337) 83 84
TYPEC (338) 80
QSTRING (339)
HSTRING (340)
LR (341) 80 81 82 86 87 112 113 115 116 117 124 125 126 129 130 133
    141 143
LRB (342)
DOTOPERATOR (343)
I_NUMBER (344) 85 109 110 118
UNCLASSIFIED (345)
ERROR (346)
LAST_TOKEN (347)


Nonterminals, with rules where they appear

$accept (97)
    on left: 0
lline (98)
    on left: 1, on right: 0
labels (99)
    on left: 2 3 4 5, on right: 1
line (100)
    on left: 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
    26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
    47 48 49 50 51 52 53 54 55, on right: 1
blank (101)
    on left: 56, on right: 10
stlabel (102)
    on left: 57, on right: 3 5
named_label (103)
    on left: 58, on right: 4 5
module (104)
    on left: 59, on right: 46
abstractinterface (105)
    on left: 60, on right: 7
contains (106)
    on left: 61, on right: 17
interface (107)
    on left: 62, on right: 45
moduleprocedure (108)
    on left: 63, on right: 47
subfun_stmt_bind (109)
    on left: 64, on right: 51
subfun_stmt (110)
    on left: 65, on right: 64
subfun (111)
    on left: 66, on right: 65
subfun_spec (112)
    on left: 67 68 69 70 71, on right: 66
subfunname (113)
    on left: 72, on right: 65
subfunprefix (114)
    on left: 73 74, on right: 65 74
subfunprefix_spec (115)
    on left: 75 76 77 78 79 80 81, on right: 74
submodule (116)
    on left: 82, on right: 52
intrinsic_type_spec (117)
    on left: 83 84, on right: 79
kind_selector (118)
    on left: 85 86 87, on right: 84
entry (119)
    on left: 88, on right: 41
endassociate (120)
    on left: 89, on right: 23
endblock (121)
    on left: 90, on right: 24
endblockdata (122)
    on left: 91, on right: 25
endcritical (123)
    on left: 92, on right: 26
enddo (124)
    on left: 93, on right: 27
endenum (125)
    on left: 94, on right: 28
endforall (126)
    on left: 95, on right: 29
endfunction (127)
    on left: 96, on right: 30
endif (128)
    on left: 97, on right: 31
endinterface (129)
    on left: 98, on right: 32
endmodule (130)
    on left: 99, on right: 33
endprocedure (131)
    on left: 100, on right: 34
endprogram (132)
    on left: 101, on right: 35
endselect (133)
    on left: 102, on right: 36
endsubmodule (134)
    on left: 103, on right: 37
endsubroutine (135)
    on left: 104, on right: 38
endtype (136)
    on left: 105, on right: 39
endwhere (137)
    on left: 106, on right: 40
simple_end (138)
    on left: 107, on right: 50
assignment (139)
    on left: 108 109 110, on right: 8
else (140)
    on left: 111, on right: 20
elseif (141)
    on left: 112, on right: 21
elsewhere (142)
    on left: 113 114, on right: 22
if_construct (143)
    on left: 115, on right: 44
where_construct (144)
    on left: 116, on right: 55
forall_construct (145)
    on left: 117, on right: 43
do_construct (146)
    on left: 118 119 120 121 122, on right: 19
do (147)
    on left: 123, on right: 118 119 120 121 122
selectcase (148)
    on left: 124, on right: 48
selecttype (149)
    on left: 125, on right: 49
case (150)
    on left: 126, on right: 13
casedefault (151)
    on left: 127, on right: 14
classdefault (152)
    on left: 128, on right: 15
classis (153)
    on left: 129, on right: 16
typeis (154)
    on left: 130, on right: 54
block (155)
    on left: 131, on right: 11
blockdata (156)
    on left: 132, on right: 12
associate (157)
    on left: 133, on right: 9
critical (158)
    on left: 134, on right: 18
enum (159)
    on left: 135, on right: 42
type (160)
    on left: 136 137 138, on right: 53
type1 (161)
    on left: 139, on right: 136 137 138
lvalue (162)
    on left: 140 141 142 143, on right: 108
construct_name (163)
    on left: 144 145, on right: 89 90 91 92 93 95 96 97 99 100 101
    103 104 105 106 111 112 113 114 132
skipall (164)
    on left: 146, on right: 62 88 98 102 118 119 120 121 125 126 127
    128 129 130 135 136 137 138
skipnoop (165)
    on left: 147, on right: 108
enable_identifier (166)
    on left: 148, on right: 59 63 66 82 88 109 110 123 139 144 145
enable_skip (167)
    on left: 149, on right: 72
enable_skipall (168)
    on left: 150, on right: 146
enable_skipnoop (169)
    on left: 151, on right: 147
getname (170)
    on left: 152, on right: 59 63 72 82 145
getstlabel (171)
    on left: 153, on right: 57
getdolabel (172)
    on left: 154, on right: 118
empty (173)
    on left: 155, on right: 2 73 144


State 0

    0 $accept: . lline $end
    1 lline: . labels line
    2 labels: . empty
    3       | . stlabel
    4       | . named_label
    5       | . stlabel named_label
   57 stlabel: . STLABEL getstlabel
   58 named_label: . NAMED_LABEL
  155 empty: . %empty  [$end, MODULE, ENTRY, SUBMODULE, MODULESUBROUTINE, MODULEFUNCTION, END, ENDSUBROUTINE, ENDFUNCTION, ENDPROGRAM, ENDMODULE, ENDSUBMODULE, IF, ELSE, ELSEIF, ENDIF, WHERE, ENDWHERE, FORALL, ENDFORALL, ELSEWHERE, DO, ENDDO, SELECTCASE, SELECTTYPE, ENDSELECT, CASE, CASEDEFAULT, TYPEIS, CLASSIS, CLASSDEFAULT, INTERFACE, ABSTRACTINTERFACE, ENDINTERFACE, CONTAINS, BLOCK, ENDBLOCK, BLOCKDATA, ENDBLOCKDATA, ASSOCIATE, ENDASSOCIATE, CRITICAL, ENDCRITICAL, ENUM, ENDENUM, ASSIGN, MODULEPROCEDURE, ENDPROCEDURE, TIDENTIFIER, BLANK, IDENTIFIER, ELEMENTAL, IMPURE, PURE, RECURSIVE, SUBROUTINE, FUNCTION, PROGRAM, TYPE, ENDTYPE, CLASS, BASICTYPE, TYPEC]

    NAMED_LABEL  shift, and go to state 1
    STLABEL      shift, and go to state 2

    $default  reduce using rule 155 (empty)

    lline        go to state 3
    labels       go to state 4
    stlabel      go to state 5
    named_label  go to state 6
    empty        go to state 7


State 1

   58 named_label: NAMED_LABEL .

    $default  reduce using rule 58 (named_label)


State 2

   57 stlabel: STLABEL . getstlabel
  153 getstlabel: . %empty

    $default  reduce using rule 153 (getstlabel)

    getstlabel  go to state 8


State 3

    0 $accept: lline . $end

    $end  shift, and go to state 9


State 4

    1 lline: labels . line
    6 line: . %empty  [$end]
    7     | . abstractinterface
    8     | . assignment
    9     | . associate
   10     | . blank
   11     | . block
   12     | . blockdata
   13     | . case
   14     | . casedefault
   15     | . classdefault
   16     | . classis
   17     | . contains
   18     | . critical
   19     | . do_construct
   20     | . else
   21     | . elseif
   22     | . elsewhere
   23     | . endassociate
   24     | . endblock
   25     | . endblockdata
   26     | . endcritical
   27     | . enddo
   28     | . endenum
   29     | . endforall
   30     | . endfunction
   31     | . endif
   32     | . endinterface
   33     | . endmodule
   34     | . endprocedure
   35     | . endprogram
   36     | . endselect
   37     | . endsubmodule
   38     | . endsubroutine
   39     | . endtype
   40     | . endwhere
   41     | . entry
   42     | . enum
   43     | . forall_construct
   44     | . if_construct
   45     | . interface
   46     | . module
   47     | . moduleprocedure
   48     | . selectcase
   49     | . selecttype
   50     | . simple_end
   51     | . subfun_stmt_bind
   52     | . submodule
   53     | . type
   54     | . typeis
   55     | . where_construct
   56 blank: . BLANK
   59 module: . MODULE enable_identifier IDENTIFIER getname EOL
   60 abstractinterface: . ABSTRACTINTERFACE EOL
   61 contains: . CONTAINS EOL
   62 interface: . INTERFACE skipall
   63 moduleprocedure: . MODULEPROCEDURE enable_identifier IDENTIFIER getname EOL
   64 subfun_stmt_bind: . subfun_stmt SKIP
   65 subfun_stmt: . subfunprefix subfun subfunname
   73 subfunprefix: . empty
   74             | . subfunprefix subfunprefix_spec
   82 submodule: . SUBMODULE LR enable_identifier IDENTIFIER getname EOL
   88 entry: . ENTRY enable_identifier IDENTIFIER skipall
   89 endassociate: . ENDASSOCIATE construct_name EOL
   90 endblock: . ENDBLOCK construct_name EOL
   91 endblockdata: . ENDBLOCKDATA construct_name EOL
   92 endcritical: . ENDCRITICAL construct_name EOL
   93 enddo: . ENDDO construct_name EOL
   94 endenum: . ENDENUM EOL
   95 endforall: . ENDFORALL construct_name EOL
   96 endfunction: . ENDFUNCTION construct_name EOL
   97 endif: . ENDIF construct_name EOL
   98 endinterface: . ENDINTERFACE skipall
   99 endmodule: . ENDMODULE construct_name EOL
  100 endprocedure: . ENDPROCEDURE construct_name EOL
  101 endprogram: . ENDPROGRAM construct_name EOL
  102 endselect: . ENDSELECT skipall
  103 endsubmodule: . ENDSUBMODULE construct_name EOL
  104 endsubroutine: . ENDSUBROUTINE construct_name EOL
  105 endtype: . ENDTYPE construct_name EOL
  106 endwhere: . ENDWHERE construct_name EOL
  107 simple_end: . END EOL
  108 assignment: . lvalue '=' skipnoop
  109           | . ASSIGN I_NUMBER TO enable_identifier IDENTIFIER EOL
  110           | . ASSIGN I_NUMBER TO enable_identifier TIDENTIFIER EOL
  111 else: . ELSE construct_name EOL
  112 elseif: . ELSEIF LR THEN construct_name EOL
  113 elsewhere: . ELSEWHERE LR construct_name EOL
  114          | . ELSEWHERE construct_name EOL
  115 if_construct: . IF LR THEN EOL
  116 where_construct: . WHERE LR EOL
  117 forall_construct: . FORALL LR EOL
  118 do_construct: . do I_NUMBER getdolabel skipall
  119             | . do IDENTIFIER skipall
  120             | . do TIDENTIFIER skipall
  121             | . do ',' skipall
  122             | . do EOL
  123 do: . DO enable_identifier
  124 selectcase: . SELECTCASE LR EOL
  125 selecttype: . SELECTTYPE LR skipall
  126 case: . CASE LR skipall
  127 casedefault: . CASEDEFAULT skipall
  128 classdefault: . CLASSDEFAULT skipall
  129 classis: . CLASSIS LR skipall
  130 typeis: . TYPEIS LR skipall
  131 block: . BLOCK EOL
  132 blockdata: . BLOCKDATA construct_name EOL
  133 associate: . ASSOCIATE LR EOL
  134 critical: . CRITICAL EOL
  135 enum: . ENUM ',' skipall
  136 type: . type1 ',' skipall
  137     | . type1 ':' skipall
  138     | . type1 IDENTIFIER skipall
  139 type1: . TYPE enable_identifier
  140 lvalue: . IDENTIFIER
  141       | . IDENTIFIER LR
  142       | . TIDENTIFIER
  143       | . TIDENTIFIER LR
  155 empty: . %empty  [MODULESUBROUTINE, MODULEFUNCTION, ELEMENTAL, IMPURE, PURE, RECURSIVE, SUBROUTINE, FUNCTION, PROGRAM, CLASS, BASICTYPE, TYPEC]

    MODULE             shift, and go to state 10
    ENTRY              shift, and go to state 11
    SUBMODULE          shift, and go to state 12
    END                shift, and go to state 13
    ENDSUBROUTINE      shift, and go to state 14
    ENDFUNCTION        shift, and go to state 15
    ENDPROGRAM         shift, and go to state 16
    ENDMODULE          shift, and go to state 17
    ENDSUBMODULE       shift, and go to state 18
    IF                 shift, and go to state 19
    ELSE               shift, and go to state 20
    ELSEIF             shift, and go to state 21
    ENDIF              shift, and go to state 22
    WHERE              shift, and go to state 23
    ENDWHERE           shift, and go to state 24
    FORALL             shift, and go to state 25
    ENDFORALL          shift, and go to state 26
    ELSEWHERE          shift, and go to state 27
    DO                 shift, and go to state 28
    ENDDO              shift, and go to state 29
    SELECTCASE         shift, and go to state 30
    SELECTTYPE         shift, and go to state 31
    ENDSELECT          shift, and go to state 32
    CASE               shift, and go to state 33
    CASEDEFAULT        shift, and go to state 34
    TYPEIS             shift, and go to state 35
    CLASSIS            shift, and go to state 36
    CLASSDEFAULT       shift, and go to state 37
    INTERFACE          shift, and go to state 38
    ABSTRACTINTERFACE  shift, and go to state 39
    ENDINTERFACE       shift, and go to state 40
    CONTAINS           shift, and go to state 41
    BLOCK              shift, and go to state 42
    ENDBLOCK           shift, and go to state 43
    BLOCKDATA          shift, and go to state 44
    ENDBLOCKDATA       shift, and go to state 45
    ASSOCIATE          shift, and go to state 46
    ENDASSOCIATE       shift, and go to state 47
    CRITICAL           shift, and go to state 48
    ENDCRITICAL        shift, and go to state 49
    ENUM               shift, and go to state 50
    ENDENUM            shift, and go to state 51
    ASSIGN             shift, and go to state 52
    MODULEPROCEDURE    shift, and go to state 53
    ENDPROCEDURE       shift, and go to state 54
    TIDENTIFIER        shift, and go to state 55
    BLANK              shift, and go to state 56
    IDENTIFIER         shift, and go to state 57
    TYPE               shift, and go to state 58
    ENDTYPE            shift, and go to state 59

    $end      reduce using rule 6 (line)
    $default  reduce using rule 155 (empty)

    line               go to state 60
    blank              go to state 61
    module             go to state 62
    abstractinterface  go to state 63
    contains           go to state 64
    interface          go to state 65
    moduleprocedure    go to state 66
    subfun_stmt_bind   go to state 67
    subfun_stmt        go to state 68
    subfunprefix       go to state 69
    submodule          go to state 70
    entry              go to state 71
    endassociate       go to state 72
    endblock           go to state 73
    endblockdata       go to state 74
    endcritical        go to state 75
    enddo              go to state 76
    endenum            go to state 77
    endforall          go to state 78
    endfunction        go to state 79
    endif              go to state 80
    endinterface       go to state 81
    endmodule          go to state 82
    endprocedure       go to state 83
    endprogram         go to state 84
    endselect          go to state 85
    endsubmodule       go to state 86
    endsubroutine      go to state 87
    endtype            go to state 88
    endwhere           go to state 89
    simple_end         go to state 90
    assignment         go to state 91
    else               go to state 92
    elseif             go to state 93
    elsewhere          go to state 94
    if_construct       go to state 95
    where_construct    go to state 96
    forall_construct   go to state 97
    do_construct       go to state 98
    do                 go to state 99
    selectcase         go to state 100
    selecttype         go to state 101
    case               go to state 102
    casedefault        go to state 103
    classdefault       go to state 104
    classis            go to state 105
    typeis             go to state 106
    block              go to state 107
    blockdata          go to state 108
    associate          go to state 109
    critical           go to state 110
    enum               go to state 111
    type               go to state 112
    type1              go to state 113
    lvalue             go to state 114
    empty              go to state 115


State 5

    3 labels: stlabel .  [$end, MODULE, ENTRY, SUBMODULE, MODULESUBROUTINE, MODULEFUNCTION, END, ENDSUBROUTINE, ENDFUNCTION, ENDPROGRAM, ENDMODULE, ENDSUBMODULE, IF, ELSE, ELSEIF, ENDIF, WHERE, ENDWHERE, FORALL, ENDFORALL, ELSEWHERE, DO, ENDDO, SELECTCASE, SELECTTYPE, ENDSELECT, CASE, CASEDEFAULT, TYPEIS, CLASSIS, CLASSDEFAULT, INTERFACE, ABSTRACTINTERFACE, ENDINTERFACE, CONTAINS, BLOCK, ENDBLOCK, BLOCKDATA, ENDBLOCKDATA, ASSOCIATE, ENDASSOCIATE, CRITICAL, ENDCRITICAL, ENUM, ENDENUM, ASSIGN, MODULEPROCEDURE, ENDPROCEDURE, TIDENTIFIER, BLANK, IDENTIFIER, ELEMENTAL, IMPURE, PURE, RECURSIVE, SUBROUTINE, FUNCTION, PROGRAM, TYPE, ENDTYPE, CLASS, BASICTYPE, TYPEC]
    5       | stlabel . named_label
   58 named_label: . NAMED_LABEL

    NAMED_LABEL  shift, and go to state 1

    $default  reduce using rule 3 (labels)

    named_label  go to state 116


State 6

    4 labels: named_label .

    $default  reduce using rule 4 (labels)


State 7

    2 labels: empty .

    $default  reduce using rule 2 (labels)


State 8

   57 stlabel: STLABEL getstlabel .

    $default  reduce using rule 57 (stlabel)


State 9

    0 $accept: lline $end .

    $default  accept


State 10

   59 module: MODULE . enable_identifier IDENTIFIER getname EOL
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 117


State 11

   88 entry: ENTRY . enable_identifier IDENTIFIER skipall
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 118


State 12

   82 submodule: SUBMODULE . LR enable_identifier IDENTIFIER getname EOL

    LR  shift, and go to state 119


State 13

  107 simple_end: END . EOL

    EOL  shift, and go to state 120


State 14

  104 endsubroutine: ENDSUBROUTINE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 121
    enable_identifier  go to state 122


State 15

   96 endfunction: ENDFUNCTION . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 123
    enable_identifier  go to state 122


State 16

  101 endprogram: ENDPROGRAM . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 124
    enable_identifier  go to state 122


State 17

   99 endmodule: ENDMODULE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 125
    enable_identifier  go to state 122


State 18

  103 endsubmodule: ENDSUBMODULE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 126
    enable_identifier  go to state 122


State 19

  115 if_construct: IF . LR THEN EOL

    LR  shift, and go to state 127


State 20

  111 else: ELSE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 128
    enable_identifier  go to state 122


State 21

  112 elseif: ELSEIF . LR THEN construct_name EOL

    LR  shift, and go to state 129


State 22

   97 endif: ENDIF . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 130
    enable_identifier  go to state 122


State 23

  116 where_construct: WHERE . LR EOL

    LR  shift, and go to state 131


State 24

  106 endwhere: ENDWHERE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 132
    enable_identifier  go to state 122


State 25

  117 forall_construct: FORALL . LR EOL

    LR  shift, and go to state 133


State 26

   95 endforall: ENDFORALL . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 134
    enable_identifier  go to state 122


State 27

  113 elsewhere: ELSEWHERE . LR construct_name EOL
  114          | ELSEWHERE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty  [IDENTIFIER, EOL]

    LR  shift, and go to state 135

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 136
    enable_identifier  go to state 122


State 28

  123 do: DO . enable_identifier
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 137


State 29

   93 enddo: ENDDO . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 138
    enable_identifier  go to state 122


State 30

  124 selectcase: SELECTCASE . LR EOL

    LR  shift, and go to state 139


State 31

  125 selecttype: SELECTTYPE . LR skipall

    LR  shift, and go to state 140


State 32

  102 endselect: ENDSELECT . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 141
    enable_skipall  go to state 142


State 33

  126 case: CASE . LR skipall

    LR  shift, and go to state 143


State 34

  127 casedefault: CASEDEFAULT . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 144
    enable_skipall  go to state 142


State 35

  130 typeis: TYPEIS . LR skipall

    LR  shift, and go to state 145


State 36

  129 classis: CLASSIS . LR skipall

    LR  shift, and go to state 146


State 37

  128 classdefault: CLASSDEFAULT . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 147
    enable_skipall  go to state 142


State 38

   62 interface: INTERFACE . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 148
    enable_skipall  go to state 142


State 39

   60 abstractinterface: ABSTRACTINTERFACE . EOL

    EOL  shift, and go to state 149


State 40

   98 endinterface: ENDINTERFACE . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 150
    enable_skipall  go to state 142


State 41

   61 contains: CONTAINS . EOL

    EOL  shift, and go to state 151


State 42

  131 block: BLOCK . EOL

    EOL  shift, and go to state 152


State 43

   90 endblock: ENDBLOCK . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 153
    enable_identifier  go to state 122


State 44

  132 blockdata: BLOCKDATA . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 154
    enable_identifier  go to state 122


State 45

   91 endblockdata: ENDBLOCKDATA . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 155
    enable_identifier  go to state 122


State 46

  133 associate: ASSOCIATE . LR EOL

    LR  shift, and go to state 156


State 47

   89 endassociate: ENDASSOCIATE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 157
    enable_identifier  go to state 122


State 48

  134 critical: CRITICAL . EOL

    EOL  shift, and go to state 158


State 49

   92 endcritical: ENDCRITICAL . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 159
    enable_identifier  go to state 122


State 50

  135 enum: ENUM . ',' skipall

    ','  shift, and go to state 160


State 51

   94 endenum: ENDENUM . EOL

    EOL  shift, and go to state 161


State 52

  109 assignment: ASSIGN . I_NUMBER TO enable_identifier IDENTIFIER EOL
  110           | ASSIGN . I_NUMBER TO enable_identifier TIDENTIFIER EOL

    I_NUMBER  shift, and go to state 162


State 53

   63 moduleprocedure: MODULEPROCEDURE . enable_identifier IDENTIFIER getname EOL
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 163


State 54

  100 endprocedure: ENDPROCEDURE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 164
    enable_identifier  go to state 122


State 55

  142 lvalue: TIDENTIFIER .  ['=']
  143       | TIDENTIFIER . LR

    LR  shift, and go to state 165

    $default  reduce using rule 142 (lvalue)


State 56

   56 blank: BLANK .

    $default  reduce using rule 56 (blank)


State 57

  140 lvalue: IDENTIFIER .  ['=']
  141       | IDENTIFIER . LR

    LR  shift, and go to state 166

    $default  reduce using rule 140 (lvalue)


State 58

  139 type1: TYPE . enable_identifier
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 167


State 59

  105 endtype: ENDTYPE . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 168
    enable_identifier  go to state 122


State 60

    1 lline: labels line .

    $default  reduce using rule 1 (lline)


State 61

   10 line: blank .

    $default  reduce using rule 10 (line)


State 62

   46 line: module .

    $default  reduce using rule 46 (line)


State 63

    7 line: abstractinterface .

    $default  reduce using rule 7 (line)


State 64

   17 line: contains .

    $default  reduce using rule 17 (line)


State 65

   45 line: interface .

    $default  reduce using rule 45 (line)


State 66

   47 line: moduleprocedure .

    $default  reduce using rule 47 (line)


State 67

   51 line: subfun_stmt_bind .

    $default  reduce using rule 51 (line)


State 68

   64 subfun_stmt_bind: subfun_stmt . SKIP

    SKIP  shift, and go to state 169


State 69

   65 subfun_stmt: subfunprefix . subfun subfunname
   66 subfun: . subfun_spec enable_identifier
   67 subfun_spec: . SUBROUTINE
   68            | . MODULESUBROUTINE
   69            | . FUNCTION
   70            | . MODULEFUNCTION
   71            | . PROGRAM
   74 subfunprefix: subfunprefix . subfunprefix_spec
   75 subfunprefix_spec: . ELEMENTAL
   76                  | . IMPURE
   77                  | . PURE
   78                  | . RECURSIVE
   79                  | . intrinsic_type_spec
   80                  | . TYPEC LR
   81                  | . CLASS LR
   83 intrinsic_type_spec: . BASICTYPE
   84                    | . BASICTYPE kind_selector

    MODULESUBROUTINE  shift, and go to state 170
    MODULEFUNCTION    shift, and go to state 171
    ELEMENTAL         shift, and go to state 172
    IMPURE            shift, and go to state 173
    PURE              shift, and go to state 174
    RECURSIVE         shift, and go to state 175
    SUBROUTINE        shift, and go to state 176
    FUNCTION          shift, and go to state 177
    PROGRAM           shift, and go to state 178
    CLASS             shift, and go to state 179
    BASICTYPE         shift, and go to state 180
    TYPEC             shift, and go to state 181

    subfun               go to state 182
    subfun_spec          go to state 183
    subfunprefix_spec    go to state 184
    intrinsic_type_spec  go to state 185


State 70

   52 line: submodule .

    $default  reduce using rule 52 (line)


State 71

   41 line: entry .

    $default  reduce using rule 41 (line)


State 72

   23 line: endassociate .

    $default  reduce using rule 23 (line)


State 73

   24 line: endblock .

    $default  reduce using rule 24 (line)


State 74

   25 line: endblockdata .

    $default  reduce using rule 25 (line)


State 75

   26 line: endcritical .

    $default  reduce using rule 26 (line)


State 76

   27 line: enddo .

    $default  reduce using rule 27 (line)


State 77

   28 line: endenum .

    $default  reduce using rule 28 (line)


State 78

   29 line: endforall .

    $default  reduce using rule 29 (line)


State 79

   30 line: endfunction .

    $default  reduce using rule 30 (line)


State 80

   31 line: endif .

    $default  reduce using rule 31 (line)


State 81

   32 line: endinterface .

    $default  reduce using rule 32 (line)


State 82

   33 line: endmodule .

    $default  reduce using rule 33 (line)


State 83

   34 line: endprocedure .

    $default  reduce using rule 34 (line)


State 84

   35 line: endprogram .

    $default  reduce using rule 35 (line)


State 85

   36 line: endselect .

    $default  reduce using rule 36 (line)


State 86

   37 line: endsubmodule .

    $default  reduce using rule 37 (line)


State 87

   38 line: endsubroutine .

    $default  reduce using rule 38 (line)


State 88

   39 line: endtype .

    $default  reduce using rule 39 (line)


State 89

   40 line: endwhere .

    $default  reduce using rule 40 (line)


State 90

   50 line: simple_end .

    $default  reduce using rule 50 (line)


State 91

    8 line: assignment .

    $default  reduce using rule 8 (line)


State 92

   20 line: else .

    $default  reduce using rule 20 (line)


State 93

   21 line: elseif .

    $default  reduce using rule 21 (line)


State 94

   22 line: elsewhere .

    $default  reduce using rule 22 (line)


State 95

   44 line: if_construct .

    $default  reduce using rule 44 (line)


State 96

   55 line: where_construct .

    $default  reduce using rule 55 (line)


State 97

   43 line: forall_construct .

    $default  reduce using rule 43 (line)


State 98

   19 line: do_construct .

    $default  reduce using rule 19 (line)


State 99

  118 do_construct: do . I_NUMBER getdolabel skipall
  119             | do . IDENTIFIER skipall
  120             | do . TIDENTIFIER skipall
  121             | do . ',' skipall
  122             | do . EOL

    TIDENTIFIER  shift, and go to state 186
    IDENTIFIER   shift, and go to state 187
    EOL          shift, and go to state 188
    I_NUMBER     shift, and go to state 189
    ','          shift, and go to state 190


State 100

   48 line: selectcase .

    $default  reduce using rule 48 (line)


State 101

   49 line: selecttype .

    $default  reduce using rule 49 (line)


State 102

   13 line: case .

    $default  reduce using rule 13 (line)


State 103

   14 line: casedefault .

    $default  reduce using rule 14 (line)


State 104

   15 line: classdefault .

    $default  reduce using rule 15 (line)


State 105

   16 line: classis .

    $default  reduce using rule 16 (line)


State 106

   54 line: typeis .

    $default  reduce using rule 54 (line)


State 107

   11 line: block .

    $default  reduce using rule 11 (line)


State 108

   12 line: blockdata .

    $default  reduce using rule 12 (line)


State 109

    9 line: associate .

    $default  reduce using rule 9 (line)


State 110

   18 line: critical .

    $default  reduce using rule 18 (line)


State 111

   42 line: enum .

    $default  reduce using rule 42 (line)


State 112

   53 line: type .

    $default  reduce using rule 53 (line)


State 113

  136 type: type1 . ',' skipall
  137     | type1 . ':' skipall
  138     | type1 . IDENTIFIER skipall

    IDENTIFIER  shift, and go to state 191
    ','         shift, and go to state 192
    ':'         shift, and go to state 193


State 114

  108 assignment: lvalue . '=' skipnoop

    '='  shift, and go to state 194


State 115

   73 subfunprefix: empty .

    $default  reduce using rule 73 (subfunprefix)


State 116

    5 labels: stlabel named_label .

    $default  reduce using rule 5 (labels)


State 117

   59 module: MODULE enable_identifier . IDENTIFIER getname EOL

    IDENTIFIER  shift, and go to state 195


State 118

   88 entry: ENTRY enable_identifier . IDENTIFIER skipall

    IDENTIFIER  shift, and go to state 196


State 119

   82 submodule: SUBMODULE LR . enable_identifier IDENTIFIER getname EOL
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 197


State 120

  107 simple_end: END EOL .

    $default  reduce using rule 107 (simple_end)


State 121

  104 endsubroutine: ENDSUBROUTINE construct_name . EOL

    EOL  shift, and go to state 198


State 122

  144 construct_name: enable_identifier . empty
  145               | enable_identifier . IDENTIFIER getname
  155 empty: . %empty  [EOL]

    IDENTIFIER  shift, and go to state 199

    $default  reduce using rule 155 (empty)

    empty  go to state 200


State 123

   96 endfunction: ENDFUNCTION construct_name . EOL

    EOL  shift, and go to state 201


State 124

  101 endprogram: ENDPROGRAM construct_name . EOL

    EOL  shift, and go to state 202


State 125

   99 endmodule: ENDMODULE construct_name . EOL

    EOL  shift, and go to state 203


State 126

  103 endsubmodule: ENDSUBMODULE construct_name . EOL

    EOL  shift, and go to state 204


State 127

  115 if_construct: IF LR . THEN EOL

    THEN  shift, and go to state 205


State 128

  111 else: ELSE construct_name . EOL

    EOL  shift, and go to state 206


State 129

  112 elseif: ELSEIF LR . THEN construct_name EOL

    THEN  shift, and go to state 207


State 130

   97 endif: ENDIF construct_name . EOL

    EOL  shift, and go to state 208


State 131

  116 where_construct: WHERE LR . EOL

    EOL  shift, and go to state 209


State 132

  106 endwhere: ENDWHERE construct_name . EOL

    EOL  shift, and go to state 210


State 133

  117 forall_construct: FORALL LR . EOL

    EOL  shift, and go to state 211


State 134

   95 endforall: ENDFORALL construct_name . EOL

    EOL  shift, and go to state 212


State 135

  113 elsewhere: ELSEWHERE LR . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 213
    enable_identifier  go to state 122


State 136

  114 elsewhere: ELSEWHERE construct_name . EOL

    EOL  shift, and go to state 214


State 137

  123 do: DO enable_identifier .

    $default  reduce using rule 123 (do)


State 138

   93 enddo: ENDDO construct_name . EOL

    EOL  shift, and go to state 215


State 139

  124 selectcase: SELECTCASE LR . EOL

    EOL  shift, and go to state 216


State 140

  125 selecttype: SELECTTYPE LR . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 217
    enable_skipall  go to state 142


State 141

  102 endselect: ENDSELECT skipall .

    $default  reduce using rule 102 (endselect)


State 142

  146 skipall: enable_skipall . SKIPALL

    SKIPALL  shift, and go to state 218


State 143

  126 case: CASE LR . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 219
    enable_skipall  go to state 142


State 144

  127 casedefault: CASEDEFAULT skipall .

    $default  reduce using rule 127 (casedefault)


State 145

  130 typeis: TYPEIS LR . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 220
    enable_skipall  go to state 142


State 146

  129 classis: CLASSIS LR . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 221
    enable_skipall  go to state 142


State 147

  128 classdefault: CLASSDEFAULT skipall .

    $default  reduce using rule 128 (classdefault)


State 148

   62 interface: INTERFACE skipall .

    $default  reduce using rule 62 (interface)


State 149

   60 abstractinterface: ABSTRACTINTERFACE EOL .

    $default  reduce using rule 60 (abstractinterface)


State 150

   98 endinterface: ENDINTERFACE skipall .

    $default  reduce using rule 98 (endinterface)


State 151

   61 contains: CONTAINS EOL .

    $default  reduce using rule 61 (contains)


State 152

  131 block: BLOCK EOL .

    $default  reduce using rule 131 (block)


State 153

   90 endblock: ENDBLOCK construct_name . EOL

    EOL  shift, and go to state 222


State 154

  132 blockdata: BLOCKDATA construct_name . EOL

    EOL  shift, and go to state 223


State 155

   91 endblockdata: ENDBLOCKDATA construct_name . EOL

    EOL  shift, and go to state 224


State 156

  133 associate: ASSOCIATE LR . EOL

    EOL  shift, and go to state 225


State 157

   89 endassociate: ENDASSOCIATE construct_name . EOL

    EOL  shift, and go to state 226


State 158

  134 critical: CRITICAL EOL .

    $default  reduce using rule 134 (critical)


State 159

   92 endcritical: ENDCRITICAL construct_name . EOL

    EOL  shift, and go to state 227


State 160

  135 enum: ENUM ',' . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 228
    enable_skipall  go to state 142


State 161

   94 endenum: ENDENUM EOL .

    $default  reduce using rule 94 (endenum)


State 162

  109 assignment: ASSIGN I_NUMBER . TO enable_identifier IDENTIFIER EOL
  110           | ASSIGN I_NUMBER . TO enable_identifier TIDENTIFIER EOL

    TO  shift, and go to state 229


State 163

   63 moduleprocedure: MODULEPROCEDURE enable_identifier . IDENTIFIER getname EOL

    IDENTIFIER  shift, and go to state 230


State 164

  100 endprocedure: ENDPROCEDURE construct_name . EOL

    EOL  shift, and go to state 231


State 165

  143 lvalue: TIDENTIFIER LR .

    $default  reduce using rule 143 (lvalue)


State 166

  141 lvalue: IDENTIFIER LR .

    $default  reduce using rule 141 (lvalue)


State 167

  139 type1: TYPE enable_identifier .

    $default  reduce using rule 139 (type1)


State 168

  105 endtype: ENDTYPE construct_name . EOL

    EOL  shift, and go to state 232


State 169

   64 subfun_stmt_bind: subfun_stmt SKIP .

    $default  reduce using rule 64 (subfun_stmt_bind)


State 170

   68 subfun_spec: MODULESUBROUTINE .

    $default  reduce using rule 68 (subfun_spec)


State 171

   70 subfun_spec: MODULEFUNCTION .

    $default  reduce using rule 70 (subfun_spec)


State 172

   75 subfunprefix_spec: ELEMENTAL .

    $default  reduce using rule 75 (subfunprefix_spec)


State 173

   76 subfunprefix_spec: IMPURE .

    $default  reduce using rule 76 (subfunprefix_spec)


State 174

   77 subfunprefix_spec: PURE .

    $default  reduce using rule 77 (subfunprefix_spec)


State 175

   78 subfunprefix_spec: RECURSIVE .

    $default  reduce using rule 78 (subfunprefix_spec)


State 176

   67 subfun_spec: SUBROUTINE .

    $default  reduce using rule 67 (subfun_spec)


State 177

   69 subfun_spec: FUNCTION .

    $default  reduce using rule 69 (subfun_spec)


State 178

   71 subfun_spec: PROGRAM .

    $default  reduce using rule 71 (subfun_spec)


State 179

   81 subfunprefix_spec: CLASS . LR

    LR  shift, and go to state 233


State 180

   83 intrinsic_type_spec: BASICTYPE .  [MODULESUBROUTINE, MODULEFUNCTION, ELEMENTAL, IMPURE, PURE, RECURSIVE, SUBROUTINE, FUNCTION, PROGRAM, CLASS, BASICTYPE, TYPEC]
   84                    | BASICTYPE . kind_selector
   85 kind_selector: . '*' I_NUMBER
   86              | . '*' LR
   87              | . LR

    LR   shift, and go to state 234
    '*'  shift, and go to state 235

    $default  reduce using rule 83 (intrinsic_type_spec)

    kind_selector  go to state 236


State 181

   80 subfunprefix_spec: TYPEC . LR

    LR  shift, and go to state 237


State 182

   65 subfun_stmt: subfunprefix subfun . subfunname
   72 subfunname: . IDENTIFIER enable_skip getname

    IDENTIFIER  shift, and go to state 238

    subfunname  go to state 239


State 183

   66 subfun: subfun_spec . enable_identifier
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 240


State 184

   74 subfunprefix: subfunprefix subfunprefix_spec .

    $default  reduce using rule 74 (subfunprefix)


State 185

   79 subfunprefix_spec: intrinsic_type_spec .

    $default  reduce using rule 79 (subfunprefix_spec)


State 186

  120 do_construct: do TIDENTIFIER . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 241
    enable_skipall  go to state 142


State 187

  119 do_construct: do IDENTIFIER . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 242
    enable_skipall  go to state 142


State 188

  122 do_construct: do EOL .

    $default  reduce using rule 122 (do_construct)


State 189

  118 do_construct: do I_NUMBER . getdolabel skipall
  154 getdolabel: . %empty

    $default  reduce using rule 154 (getdolabel)

    getdolabel  go to state 243


State 190

  121 do_construct: do ',' . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 244
    enable_skipall  go to state 142


State 191

  138 type: type1 IDENTIFIER . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 245
    enable_skipall  go to state 142


State 192

  136 type: type1 ',' . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 246
    enable_skipall  go to state 142


State 193

  137 type: type1 ':' . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 247
    enable_skipall  go to state 142


State 194

  108 assignment: lvalue '=' . skipnoop
  147 skipnoop: . enable_skipnoop SKIPNOOP
  151 enable_skipnoop: . %empty

    $default  reduce using rule 151 (enable_skipnoop)

    skipnoop         go to state 248
    enable_skipnoop  go to state 249


State 195

   59 module: MODULE enable_identifier IDENTIFIER . getname EOL
  152 getname: . %empty

    $default  reduce using rule 152 (getname)

    getname  go to state 250


State 196

   88 entry: ENTRY enable_identifier IDENTIFIER . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 251
    enable_skipall  go to state 142


State 197

   82 submodule: SUBMODULE LR enable_identifier . IDENTIFIER getname EOL

    IDENTIFIER  shift, and go to state 252


State 198

  104 endsubroutine: ENDSUBROUTINE construct_name EOL .

    $default  reduce using rule 104 (endsubroutine)


State 199

  145 construct_name: enable_identifier IDENTIFIER . getname
  152 getname: . %empty

    $default  reduce using rule 152 (getname)

    getname  go to state 253


State 200

  144 construct_name: enable_identifier empty .

    $default  reduce using rule 144 (construct_name)


State 201

   96 endfunction: ENDFUNCTION construct_name EOL .

    $default  reduce using rule 96 (endfunction)


State 202

  101 endprogram: ENDPROGRAM construct_name EOL .

    $default  reduce using rule 101 (endprogram)


State 203

   99 endmodule: ENDMODULE construct_name EOL .

    $default  reduce using rule 99 (endmodule)


State 204

  103 endsubmodule: ENDSUBMODULE construct_name EOL .

    $default  reduce using rule 103 (endsubmodule)


State 205

  115 if_construct: IF LR THEN . EOL

    EOL  shift, and go to state 254


State 206

  111 else: ELSE construct_name EOL .

    $default  reduce using rule 111 (else)


State 207

  112 elseif: ELSEIF LR THEN . construct_name EOL
  144 construct_name: . enable_identifier empty
  145               | . enable_identifier IDENTIFIER getname
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    construct_name     go to state 255
    enable_identifier  go to state 122


State 208

   97 endif: ENDIF construct_name EOL .

    $default  reduce using rule 97 (endif)


State 209

  116 where_construct: WHERE LR EOL .

    $default  reduce using rule 116 (where_construct)


State 210

  106 endwhere: ENDWHERE construct_name EOL .

    $default  reduce using rule 106 (endwhere)


State 211

  117 forall_construct: FORALL LR EOL .

    $default  reduce using rule 117 (forall_construct)


State 212

   95 endforall: ENDFORALL construct_name EOL .

    $default  reduce using rule 95 (endforall)


State 213

  113 elsewhere: ELSEWHERE LR construct_name . EOL

    EOL  shift, and go to state 256


State 214

  114 elsewhere: ELSEWHERE construct_name EOL .

    $default  reduce using rule 114 (elsewhere)


State 215

   93 enddo: ENDDO construct_name EOL .

    $default  reduce using rule 93 (enddo)


State 216

  124 selectcase: SELECTCASE LR EOL .

    $default  reduce using rule 124 (selectcase)


State 217

  125 selecttype: SELECTTYPE LR skipall .

    $default  reduce using rule 125 (selecttype)


State 218

  146 skipall: enable_skipall SKIPALL .

    $default  reduce using rule 146 (skipall)


State 219

  126 case: CASE LR skipall .

    $default  reduce using rule 126 (case)


State 220

  130 typeis: TYPEIS LR skipall .

    $default  reduce using rule 130 (typeis)


State 221

  129 classis: CLASSIS LR skipall .

    $default  reduce using rule 129 (classis)


State 222

   90 endblock: ENDBLOCK construct_name EOL .

    $default  reduce using rule 90 (endblock)


State 223

  132 blockdata: BLOCKDATA construct_name EOL .

    $default  reduce using rule 132 (blockdata)


State 224

   91 endblockdata: ENDBLOCKDATA construct_name EOL .

    $default  reduce using rule 91 (endblockdata)


State 225

  133 associate: ASSOCIATE LR EOL .

    $default  reduce using rule 133 (associate)


State 226

   89 endassociate: ENDASSOCIATE construct_name EOL .

    $default  reduce using rule 89 (endassociate)


State 227

   92 endcritical: ENDCRITICAL construct_name EOL .

    $default  reduce using rule 92 (endcritical)


State 228

  135 enum: ENUM ',' skipall .

    $default  reduce using rule 135 (enum)


State 229

  109 assignment: ASSIGN I_NUMBER TO . enable_identifier IDENTIFIER EOL
  110           | ASSIGN I_NUMBER TO . enable_identifier TIDENTIFIER EOL
  148 enable_identifier: . %empty

    $default  reduce using rule 148 (enable_identifier)

    enable_identifier  go to state 257


State 230

   63 moduleprocedure: MODULEPROCEDURE enable_identifier IDENTIFIER . getname EOL
  152 getname: . %empty

    $default  reduce using rule 152 (getname)

    getname  go to state 258


State 231

  100 endprocedure: ENDPROCEDURE construct_name EOL .

    $default  reduce using rule 100 (endprocedure)


State 232

  105 endtype: ENDTYPE construct_name EOL .

    $default  reduce using rule 105 (endtype)


State 233

   81 subfunprefix_spec: CLASS LR .

    $default  reduce using rule 81 (subfunprefix_spec)


State 234

   87 kind_selector: LR .

    $default  reduce using rule 87 (kind_selector)


State 235

   85 kind_selector: '*' . I_NUMBER
   86              | '*' . LR

    LR        shift, and go to state 259
    I_NUMBER  shift, and go to state 260


State 236

   84 intrinsic_type_spec: BASICTYPE kind_selector .

    $default  reduce using rule 84 (intrinsic_type_spec)


State 237

   80 subfunprefix_spec: TYPEC LR .

    $default  reduce using rule 80 (subfunprefix_spec)


State 238

   72 subfunname: IDENTIFIER . enable_skip getname
  149 enable_skip: . %empty

    $default  reduce using rule 149 (enable_skip)

    enable_skip  go to state 261


State 239

   65 subfun_stmt: subfunprefix subfun subfunname .

    $default  reduce using rule 65 (subfun_stmt)


State 240

   66 subfun: subfun_spec enable_identifier .

    $default  reduce using rule 66 (subfun)


State 241

  120 do_construct: do TIDENTIFIER skipall .

    $default  reduce using rule 120 (do_construct)


State 242

  119 do_construct: do IDENTIFIER skipall .

    $default  reduce using rule 119 (do_construct)


State 243

  118 do_construct: do I_NUMBER getdolabel . skipall
  146 skipall: . enable_skipall SKIPALL
  150 enable_skipall: . %empty

    $default  reduce using rule 150 (enable_skipall)

    skipall         go to state 262
    enable_skipall  go to state 142


State 244

  121 do_construct: do ',' skipall .

    $default  reduce using rule 121 (do_construct)


State 245

  138 type: type1 IDENTIFIER skipall .

    $default  reduce using rule 138 (type)


State 246

  136 type: type1 ',' skipall .

    $default  reduce using rule 136 (type)


State 247

  137 type: type1 ':' skipall .

    $default  reduce using rule 137 (type)


State 248

  108 assignment: lvalue '=' skipnoop .

    $default  reduce using rule 108 (assignment)


State 249

  147 skipnoop: enable_skipnoop . SKIPNOOP

    SKIPNOOP  shift, and go to state 263


State 250

   59 module: MODULE enable_identifier IDENTIFIER getname . EOL

    EOL  shift, and go to state 264


State 251

   88 entry: ENTRY enable_identifier IDENTIFIER skipall .

    $default  reduce using rule 88 (entry)


State 252

   82 submodule: SUBMODULE LR enable_identifier IDENTIFIER . getname EOL
  152 getname: . %empty

    $default  reduce using rule 152 (getname)

    getname  go to state 265


State 253

  145 construct_name: enable_identifier IDENTIFIER getname .

    $default  reduce using rule 145 (construct_name)


State 254

  115 if_construct: IF LR THEN EOL .

    $default  reduce using rule 115 (if_construct)


State 255

  112 elseif: ELSEIF LR THEN construct_name . EOL

    EOL  shift, and go to state 266


State 256

  113 elsewhere: ELSEWHERE LR construct_name EOL .

    $default  reduce using rule 113 (elsewhere)


State 257

  109 assignment: ASSIGN I_NUMBER TO enable_identifier . IDENTIFIER EOL
  110           | ASSIGN I_NUMBER TO enable_identifier . TIDENTIFIER EOL

    TIDENTIFIER  shift, and go to state 267
    IDENTIFIER   shift, and go to state 268


State 258

   63 moduleprocedure: MODULEPROCEDURE enable_identifier IDENTIFIER getname . EOL

    EOL  shift, and go to state 269


State 259

   86 kind_selector: '*' LR .

    $default  reduce using rule 86 (kind_selector)


State 260

   85 kind_selector: '*' I_NUMBER .

    $default  reduce using rule 85 (kind_selector)


State 261

   72 subfunname: IDENTIFIER enable_skip . getname
  152 getname: . %empty

    $default  reduce using rule 152 (getname)

    getname  go to state 270


State 262

  118 do_construct: do I_NUMBER getdolabel skipall .

    $default  reduce using rule 118 (do_construct)


State 263

  147 skipnoop: enable_skipnoop SKIPNOOP .

    $default  reduce using rule 147 (skipnoop)


State 264

   59 module: MODULE enable_identifier IDENTIFIER getname EOL .

    $default  reduce using rule 59 (module)


State 265

   82 submodule: SUBMODULE LR enable_identifier IDENTIFIER getname . EOL

    EOL  shift, and go to state 271


State 266

  112 elseif: ELSEIF LR THEN construct_name EOL .

    $default  reduce using rule 112 (elseif)


State 267

  110 assignment: ASSIGN I_NUMBER TO enable_identifier TIDENTIFIER . EOL

    EOL  shift, and go to state 272


State 268

  109 assignment: ASSIGN I_NUMBER TO enable_identifier IDENTIFIER . EOL

    EOL  shift, and go to state 273


State 269

   63 moduleprocedure: MODULEPROCEDURE enable_identifier IDENTIFIER getname EOL .

    $default  reduce using rule 63 (moduleprocedure)


State 270

   72 subfunname: IDENTIFIER enable_skip getname .

    $default  reduce using rule 72 (subfunname)


State 271

   82 submodule: SUBMODULE LR enable_identifier IDENTIFIER getname EOL .

    $default  reduce using rule 82 (submodule)


State 272

  110 assignment: ASSIGN I_NUMBER TO enable_identifier TIDENTIFIER EOL .

    $default  reduce using rule 110 (assignment)


State 273

  109 assignment: ASSIGN I_NUMBER TO enable_identifier IDENTIFIER EOL .

    $default  reduce using rule 109 (assignment)
